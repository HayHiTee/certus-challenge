from django.contrib.auth import get_user_model
from django.test import TestCase, Client

# Create your tests here.
from rest_framework.authtoken.models import Token
from rest_framework.test import APIRequestFactory, APIClient, APITestCase


class FindingsApiTestCase(APITestCase):

    def setUp(self):
        self.client = APIClient()
        self.test_username = 'test-server'
        self.test_password = 'test-server'
        self.user = get_user_model()
        self.test_user = self.user.objects.create_user(username=self.test_username, password=self.test_password)
        self.token = Token.objects.create(user=self.test_user)
        self.client.credentials(HTTP_AUTHORIZATION='Token ' + self.token.key)
        self.credentials = {'username': self.test_user.username, 'password': self.test_password}
        self.test_user.is_staff = True
        self.test_user.is_superuser = True
        self.test_user.save()
        self.url = "/findings/api/v1/"
        self.data = {
            "finding_name": "test-findings",
            "description": "Great description",
            "solution": "Nice solutions",
            "website": ""
        }

    def test_user_authenticated(self):
        logged_in = self.client.login(**self.credentials)
        self.assertTrue(logged_in)

    def test_token(self):
        token = Token.objects.get(user__username=self.test_username)
        self.assertEquals(self.token, token)

    def test_create_findings(self):
        response = self.client.get(self.url)
        self.assertEquals(response.status_code, 200)
        response = self.client.post(self.url, self.data, format='json')
        response_data = response.data
        self.assertEquals(response.status_code, 201)
        for key in self.data:
            self.assertEquals(response_data[key], self.data[key])

    def test_list_findings(self):
        counter = 5
        for i in range(counter):
            response = self.client.post(self.url, self.data, format='json')
            self.assertEquals(response.status_code, 201)

        response = self.client.get(self.url)
        self.assertEquals(response.status_code, 200)
        self.assertEquals(len(response.data), counter)

    def test_update_findings(self):
        response = self.client.post(self.url, self.data, format='json')
        self.assertEquals(response.status_code, 201)
        id = response.data.get('id')
        self.data['website'] = 'http://www.website.com'
        response = self.client.put(f"{self.url}{id}/", self.data, format='json')
        self.assertEquals(response.status_code, 200)
        for key in self.data:
            self.assertEquals(response.data[key], self.data[key])

    def test_patch_findings(self):
        response = self.client.post(self.url, self.data, format='json')
        self.assertEquals(response.status_code, 201)
        id = response.data.get('id')
        patch_data = {
            'website': 'http://www.website.com'
        }
        self.data['website'] = 'http://www.website.com'
        response = self.client.patch(f"{self.url}{id}/", patch_data, format='json')
        self.assertEquals(response.status_code, 200)
        for key in self.data:
            self.assertEquals(response.data[key], self.data[key])

    def test_delete_findings(self):
        response = self.client.post(self.url, self.data, format='json')
        self.assertEquals(response.status_code, 201)
        id = response.data.get('id')
        response = self.client.delete(f"{self.url}{id}/")
        self.assertEquals(response.status_code, 204)
        self.assertIsNone(response.data)
