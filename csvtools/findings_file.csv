Findings,Descrptions,Solutions
Filename injection Path traversal,"A Path Traversal attack aims to access files and directories that are stored outside the web root folder. By browsing the application, the attacker looks for absolute links to files stored on the web server. By manipulating variables that reference files with dotdotslash (../); sequences and its variations, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and critical system files, limited by system operational access control. The attacker uses  ../../ sequences to move up to root directory, thus permitting navigation through the file system. This attack can be executed with an external malicious code injected on the path, like the Resource Injection attack.","A Path Traversal attack aims to access files and directories that are stored outside the web root folder. By browsing the application, the attacker looks for absolute links to files stored on the web server. By manipulating variables that reference files with dotdotslash (../); sequences and its variations, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and critical system files, limited by system operational access control. The attacker uses  ../../ sequences to move up to root directory, thus permitting navigation through the file system. This attack can be executed with an external malicious code injected on the path, like the Resource Injection attack."
XSS injection,"Every time the application gets userinput, whether this showing it on screen or processing this data in the application background, these parameters should be escaped for malicious code in order to prevent crosssite scripting injections. When an attacker gains the possibility to perform an XSS injection, he is given the opportunity to inject HTML and JavaScript code directly into the application. This could lead to accounts being compromised by stealing session cookies or directly  affect the operation of the target application.   Altough templating engines(razor, twig, jinja, etc) and contextaware applications(Angular, React, etc) do a lot of auto escaping for you. These frameworks should always be validated for effectiveness.","Every time the application gets userinput, whether this showing it on screen or processing this data in the application background, these parameters should be escaped for malicious code in order to prevent crosssite scripting injections. When an attacker gains the possibility to perform an XSS injection, he is given the opportunity to inject HTML and JavaScript code directly into the application. This could lead to accounts being compromised by stealing session cookies or directly  affect the operation of the target application.   Altough templating engines(razor, twig, jinja, etc) and contextaware applications(Angular, React, etc) do a lot of auto escaping for you. These frameworks should always be validated for effectiveness."
Command injection,"Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application. Command injection attacks are possible when an application passes unsafe user supplied data (forms, cookies, HTTP headers etc.) to a system shell. In this attack, the attackersupplied operating system commands are usually executed with the privileges of the vulnerable application. Command injection attacks are possible largely due to insufficient input validation. This attack differs from Code Injection, in that code injection allows the attacker to adds his own code that is then executed by the application. In Code Injection, the attacker extends the default functionality of the application without the necessity of executing system commands.","Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application. Command injection attacks are possible when an application passes unsafe user supplied data (forms, cookies, HTTP headers etc.) to a system shell. In this attack, the attackersupplied operating system commands are usually executed with the privileges of the vulnerable application. Command injection attacks are possible largely due to insufficient input validation. This attack differs from Code Injection, in that code injection allows the attacker to adds his own code that is then executed by the application. In Code Injection, the attacker extends the default functionality of the application without the necessity of executing system commands."
Cross site request forgery,"CrossSite Request Forgery (CSRF) is a type of attack that occurs when a malicious Web site, email, blog, instant message, or program causes a users Web browser to perform an unwanted action on a trusted site for which the user is currently authenticated.  The impact of a successful crosssite request forgery attack is limited to the capabilities exposed by the vulnerable application. For example, this attack could result in a transfer of funds, changing a password, or purchasing an item in the users context. In effect, CSRF attacks are used by an attacker to make a target system perform a function (funds Transfer, form submission etc.) via the targets browser without knowledge of the target user at least until the unauthorised function has been committed.","CrossSite Request Forgery (CSRF) is a type of attack that occurs when a malicious Web site, email, blog, instant message, or program causes a users Web browser to perform an unwanted action on a trusted site for which the user is currently authenticated.  The impact of a successful crosssite request forgery attack is limited to the capabilities exposed by the vulnerable application. For example, this attack could result in a transfer of funds, changing a password, or purchasing an item in the users context. In effect, CSRF attacks are used by an attacker to make a target system perform a function (funds Transfer, form submission etc.) via the targets browser without knowledge of the target user at least until the unauthorised function has been committed."
XXE injections,"Processing of an Xml eXternal Entity containing tainted data may lead to the disclosure of confidential information and other system impacts. The XML 1.0 standard defines the structure of an XML document. The standard defines a concept called an entity, which is a storage unit of some type.  There exists a specific type of entity, an external general parsed entity often shortened to an external entity, that can access local or remote content via a declared system identifier and the XML processor may disclose confidential information normally not accessible by the application. Attacks can include disclosing local files, which may contain sensitive data such as passwords or private user data.","Processing of an Xml eXternal Entity containing tainted data may lead to the disclosure of confidential information and other system impacts. The XML 1.0 standard defines the structure of an XML document. The standard defines a concept called an entity, which is a storage unit of some type.  There exists a specific type of entity, an external general parsed entity often shortened to an external entity, that can access local or remote content via a declared system identifier and the XML processor may disclose confidential information normally not accessible by the application. Attacks can include disclosing local files, which may contain sensitive data such as passwords or private user data."
X Path injections,"Web applications heavily use databases to store and access the data they need for their operations. Historically, relational databases have been by far the most common technology for data storage, but in the last years, we are witnessing an increasing popularity for databases that organise data using the XML language. Just like relational databases are accessed via SQL language, XML databases use XPath as their standard query language.","Web applications heavily use databases to store and access the data they need for their operations. Historically, relational databases have been by far the most common technology for data storage, but in the last years, we are witnessing an increasing popularity for databases that organise data using the XML language. Just like relational databases are accessed via SQL language, XML databases use XPath as their standard query language."
XML injection,"XML Injection is an attack technique used to manipulate or compromise the logic of an XML application or service. The injection of unintended XML content and/or structures into an XML message can alter the intended logic of the application. Further, XML injection can cause the insertion of malicious content into the resulting message/document.","XML Injection is an attack technique used to manipulate or compromise the logic of an XML application or service. The injection of unintended XML content and/or structures into an XML message can alter the intended logic of the application. Further, XML injection can cause the insertion of malicious content into the resulting message/document."
XSLT injections,"A vulnerability occurs when an XSL file is loaded from a source controlled by an attacker. When the attacker is given the opportunity to specify the source of the included XSL file he could include a file which contains malicious code to be parsed on the target application. This could lead to, code execution, reading arbitrary files and many more vulnerabilities such as XSS.","A vulnerability occurs when an XSL file is loaded from a source controlled by an attacker. When the attacker is given the opportunity to specify the source of the included XSL file he could include a file which contains malicious code to be parsed on the target application. This could lead to, code execution, reading arbitrary files and many more vulnerabilities such as XSS."
External DTD parsing,"Processing of an external entity containing tainted data may lead to the disclosure of confidential information and other system impacts. The XML 1.0 standard defines the structure of an XML document. The standard defines a concept called an entity, which is a storage unit of some type. There exists a specific type of entity, an external general parsed entity often shortened to an external entity that can access local or remote content via a declared system identifier. The system identifier is assumed to be a URI that can be dereferenced (accessed) by the XML processor when processing the entity. The XML processor then replaces occurrences of the named external entity with the contents dereferenced by the system identifier. If the system identifier contains tainted data and the XML processor dereferences this tainted data, the XML processor may disclose confidential information normally not accessible by the application. Attacks can include disclosing local files, which may contain sensitive data such as passwords or private user data, using file: schemes or relative paths in the system identifier. Since the attack occurs relative to the application processing the XML document, an attacker may use this trusted application to pivot to other internal systems, possibly disclosing other internal content via HTTP(s) requests. In some situations, an XML processor library that is vulnerable to clientside memory corruption issues may be exploited by dereferencing a malicious URI, possibly allowing arbitrary code execution under the application account. Other attacks can access local resources that may not stop returning data, possibly impacting application availability if too many threads or processes are not released.","Processing of an external entity containing tainted data may lead to the disclosure of confidential information and other system impacts. The XML 1.0 standard defines the structure of an XML document. The standard defines a concept called an entity, which is a storage unit of some type. There exists a specific type of entity, an external general parsed entity often shortened to an external entity that can access local or remote content via a declared system identifier. The system identifier is assumed to be a URI that can be dereferenced (accessed) by the XML processor when processing the entity. The XML processor then replaces occurrences of the named external entity with the contents dereferenced by the system identifier. If the system identifier contains tainted data and the XML processor dereferences this tainted data, the XML processor may disclose confidential information normally not accessible by the application. Attacks can include disclosing local files, which may contain sensitive data such as passwords or private user data, using file: schemes or relative paths in the system identifier. Since the attack occurs relative to the application processing the XML document, an attacker may use this trusted application to pivot to other internal systems, possibly disclosing other internal content via HTTP(s) requests. In some situations, an XML processor library that is vulnerable to clientside memory corruption issues may be exploited by dereferencing a malicious URI, possibly allowing arbitrary code execution under the application account. Other attacks can access local resources that may not stop returning data, possibly impacting application availability if too many threads or processes are not released."
LDAP injection,"LDAP (Lightweight Directory Access Protocol) Injection is an attack used to exploit web based applications that construct LDAP statements based on user input. When an application fails to properly sanitize user input, it is possible to modify LDAP statements using a local proxy. This could result in the execution of arbitrary commands such as granting permissions to unauthorized queries, and content modification inside the LDAP tree. The same advanced exploitation techniques available in SQL Injection can be similarly applied in LDAP Injection.","LDAP (Lightweight Directory Access Protocol) Injection is an attack used to exploit web based applications that construct LDAP statements based on user input. When an application fails to properly sanitize user input, it is possible to modify LDAP statements using a local proxy. This could result in the execution of arbitrary commands such as granting permissions to unauthorized queries, and content modification inside the LDAP tree. The same advanced exploitation techniques available in SQL Injection can be similarly applied in LDAP Injection."
SSI injections,"Web servers usually give developers the ability to add small pieces of dynamic code inside static HTML pages, without having to deal with fullfledged serverside or clientside languages.  This feature is incarnated by the ServerSide Includes (SSI). The attacker will try to inject code into the application that will be interpreted by SSI mechanisms. A successful exploitation of this vulnerability allows an attacker to inject code into HTML pages or even perform remote code execution.","Web servers usually give developers the ability to add small pieces of dynamic code inside static HTML pages, without having to deal with fullfledged serverside or clientside languages.  This feature is incarnated by the ServerSide Includes (SSI). The attacker will try to inject code into the application that will be interpreted by SSI mechanisms. A successful exploitation of this vulnerability allows an attacker to inject code into HTML pages or even perform remote code execution."
File upload injections,"Uploaded files represent a significant risk to applications. The first step in many attacks is to get some code to the system to be attacked. Then the attack only needs to find a way to get the code executed. Using a file upload helps the attacker accomplish the first step.  The consequences of unrestricted file upload can vary, including complete system takeover, an overloaded file system or database, forwarding attacks to backend systems, and simple defacement.  There are really two classes of problems here. The first is with the file metadata, like the path and file name. These are generally provided by the transport, such as HTTP multipart encoding. This data may trick the application into overwriting a critical file or storing the file in a bad location. You must validate the metadata extremely carefully before using it.  The other class of problem is with the file size or content. An attacker can easily craft a valid image file with PHP code inside.","Uploaded files represent a significant risk to applications. The first step in many attacks is to get some code to the system to be attacked. Then the attack only needs to find a way to get the code executed. Using a file upload helps the attacker accomplish the first step.  The consequences of unrestricted file upload can vary, including complete system takeover, an overloaded file system or database, forwarding attacks to backend systems, and simple defacement.  There are really two classes of problems here. The first is with the file metadata, like the path and file name. These are generally provided by the transport, such as HTTP multipart encoding. This data may trick the application into overwriting a critical file or storing the file in a bad location. You must validate the metadata extremely carefully before using it.  The other class of problem is with the file size or content. An attacker can easily craft a valid image file with PHP code inside."
Version management,"An important aspect of secure application development is to prevent information leakage.  Error messages give an attacker great insight into the inner workings of an application.  The purpose of reviewing the Error Handling code is to assure the application fails safely under all  possible error conditions, expected and unexpected. No sensitive information is presented to the user  when an error occurs.  When an exception or error is thrown we also need to log this occurrence. Sometimes this is due to bad development, but it can be the result of an attack or some other service your application relies on failing.  All code paths that can cause an exception to be thrown should check for success in order for the exception  not to be thrown.","An important aspect of secure application development is to prevent information leakage.  Error messages give an attacker great insight into the inner workings of an application.  The purpose of reviewing the Error Handling code is to assure the application fails safely under all  possible error conditions, expected and unexpected. No sensitive information is presented to the user  when an error occurs.  When an exception or error is thrown we also need to log this occurrence. Sometimes this is due to bad development, but it can be the result of an attack or some other service your application relies on failing.  All code paths that can cause an exception to be thrown should check for success in order for the exception  not to be thrown."
Debug enabeling,"Sometimes it is possible through an ""enabling debug parameter"" to display technical information/secrets within the application. As a result, the attacker learns more about the operation of the application, increasing his attack surface. Sometimes having a debug flag  enabled could even lead to code execution attacks (older versions of werkzeug)","Sometimes it is possible through an ""enabling debug parameter"" to display technical information/secrets within the application. As a result, the attacker learns more about the operation of the application, increasing his attack surface. Sometimes having a debug flag  enabled could even lead to code execution attacks (older versions of werkzeug)"
Robots.txt,"Each site uses a robots.txt file which allows search engines to provide information. The robots.txt determines what pages may or may not be indexed by google or yahoo etc. However, a common mistake made by programmers is applying a blacklisting method causing the application displaying sensitive information to attackers.","Each site uses a robots.txt file which allows search engines to provide information. The robots.txt determines what pages may or may not be indexed by google or yahoo etc. However, a common mistake made by programmers is applying a blacklisting method causing the application displaying sensitive information to attackers."
Accessible non parsed dynamic scripts,"Applications often include files in other pages. When these files can be directly approached by normal users, the operation of the application can be traced because the source code becomes available. This improves the possibility that the attacker discovers vulnerabilities.  It is also highly recommended that old files are removed from the server and not beind stored or backuped as i.e ""file.php.old"".","Applications often include files in other pages. When these files can be directly approached by normal users, the operation of the application can be traced because the source code becomes available. This improves the possibility that the attacker discovers vulnerabilities.  It is also highly recommended that old files are removed from the server and not beind stored or backuped as i.e ""file.php.old""."
Include anti caching headers,"Anticaching headers have the ability to tell the browser, computer and proxies what information they may or may not store on the intermediate media","Anticaching headers have the ability to tell the browser, computer and proxies what information they may or may not store on the intermediate media"
Include anti clickjacking headers,"Clickjacking, also known as a ""UI redress attack"", is when an attacker uses multiple transparent or opaque layers to trick a user into clicking on a button or link on another page when they were intending to click on the top level page. Thus, the attacker is ""hijacking"" clicks meant for their page and routing them to another page, most likely owned by another application, domain, or both.  Using a similar technique, keystrokes can also be hijacked. With a carefully crafted combination of stylesheets, iframes, and text boxes, a user can be led to believe they are typing in the password to their email or bank account, but are instead typing into an invisible frame controlled by the attacker.","Clickjacking, also known as a ""UI redress attack"", is when an attacker uses multiple transparent or opaque layers to trick a user into clicking on a button or link on another page when they were intending to click on the top level page. Thus, the attacker is ""hijacking"" clicks meant for their page and routing them to another page, most likely owned by another application, domain, or both.  Using a similar technique, keystrokes can also be hijacked. With a carefully crafted combination of stylesheets, iframes, and text boxes, a user can be led to believe they are typing in the password to their email or bank account, but are instead typing into an invisible frame controlled by the attacker."
Include X XSS,"This header enables the Crosssite scripting (XSS) filter built into most recent web browsers. It is usually enabled by default anyway, so the role of this header is to reenable the filter for this particular website if it was disabled by the user. This header is supported in IE 8 and in Chrome 4.","This header enables the Crosssite scripting (XSS) filter built into most recent web browsers. It is usually enabled by default anyway, so the role of this header is to reenable the filter for this particular website if it was disabled by the user. This header is supported in IE 8 and in Chrome 4."
Include X Content Type Options header,"The only defined value, nosniff, prevents Internet Explorer and Google Chrome from MIMEsniffing a response away from the declared contenttype. This also applies to Google Chrome, when downloading extensions. This reduces exposure to driveby download attacks and sites serving user uploaded content that, by clever naming, could be treated by MSIE as executable or dynamic HTML files.","The only defined value, nosniff, prevents Internet Explorer and Google Chrome from MIMEsniffing a response away from the declared contenttype. This also applies to Google Chrome, when downloading extensions. This reduces exposure to driveby download attacks and sites serving user uploaded content that, by clever naming, could be treated by MSIE as executable or dynamic HTML files."
Include Strict Transport Security header,HTTP StrictTransportSecurity (HSTS) enforces secure (HTTP over SSL/TLS) connections to the server. This reduces the impact of bugs in web applications leaking session data through cookies and external links and defends against Maninthemiddle attacks. HSTS also disables the ability for user''s to ignore SSL negotiation warnings,HTTP StrictTransportSecurity (HSTS) enforces secure (HTTP over SSL/TLS) connections to the server. This reduces the impact of bugs in web applications leaking session data through cookies and external links and defends against Maninthemiddle attacks. HSTS also disables the ability for user''s to ignore SSL negotiation warnings
Sensitive information stored in cookies,"Sensitive data should not be stored in a cookie,because the cookie is also used on the clientside and is adaptable thus making its content readable. A hacker could gain access to a cookie through cross site scripting attacks and gain the sensitive information stored in the targets cookie.","Sensitive data should not be stored in a cookie,because the cookie is also used on the clientside and is adaptable thus making its content readable. A hacker could gain access to a cookie through cross site scripting attacks and gain the sensitive information stored in the targets cookie."
Client side state management,"An application can implement all kinds of logic rules through JavaScript and HTML. However, these are clientside constraints that a hacker can easily disable or modify.","An application can implement all kinds of logic rules through JavaScript and HTML. However, these are clientside constraints that a hacker can easily disable or modify."
Too verbose authentication,"The error messages that are displayed when a user fails to login into an application should be selected with caution. When this error message gives away too much information, this information can be exploited by a hacker.","The error messages that are displayed when a user fails to login into an application should be selected with caution. When this error message gives away too much information, this information can be exploited by a hacker."
Brute force password guessing,"Login functions should not be abused in an automated way that an attacker could create a script that contains a list of usernames and passwords, which he could use against your login function in order to gain unauthorized access to user accounts.","Login functions should not be abused in an automated way that an attacker could create a script that contains a list of usernames and passwords, which he could use against your login function in order to gain unauthorized access to user accounts."
Denial of service by locking out accounts,"Whenever the opportunity to log into the application is offered, it should not lock out accounts. A hacker could abuse this function to make the application deny access towards its power users.","Whenever the opportunity to log into the application is offered, it should not lock out accounts. A hacker could abuse this function to make the application deny access towards its power users."
Predictable password and or token generation,Tokens or passwords that are used within the application must contain high entropy in order to prevent the prediction of these values.,Tokens or passwords that are used within the application must contain high entropy in order to prevent the prediction of these values.
Unauthorized credential changes,"An application which offers user login functionality, usually has an administration page where userdata can be modified. When the user wants to change this data he should specify his current password.","An application which offers user login functionality, usually has an administration page where userdata can be modified. When the user wants to change this data he should specify his current password."
Double decoding of headers parameters,"Double decoding is a problem which often occurs when multiple servers are used in which a configuration error is made. A hacker can encode his payload differently so it will not be recognized by a Web Application Firewall (WAF) or an Intrusion Detection System (IDS) and also bypass the escaping of the application.  By using double encoding it''s possible to bypass security filters that only decode user input once. The second decoding process is executed by the backend platform or modules that properly handle encoded data, but don''t have the corresponding security checks in place.  Attackers can inject double encoding in pathnames or query strings to bypass the authentication scheme and security filters in use by the web application.","Double decoding is a problem which often occurs when multiple servers are used in which a configuration error is made. A hacker can encode his payload differently so it will not be recognized by a Web Application Firewall (WAF) or an Intrusion Detection System (IDS) and also bypass the escaping of the application.  By using double encoding it''s possible to bypass security filters that only decode user input once. The second decoding process is executed by the backend platform or modules that properly handle encoded data, but don''t have the corresponding security checks in place.  Attackers can inject double encoding in pathnames or query strings to bypass the authentication scheme and security filters in use by the web application."
Resource identifier injection,"A resource identifier injection basically means that the attacker can determine which resources are loaded into the web application. An attacker could thus influence the operation of the web application and redirect users to other websites. This attack consists of changing resource identifiers used by an application in order to perform a malicious task. When an application permits a user input to define a resource, like a file name or port number, this data can be manipulated to execute or access different resources. In order to be properly executed, the attacker must have the possibility to specify a resource identifier through the application form and the application must permit the execution. The resource type affected by user input indicates the content type that may be exposed. For example, an application that permits input of special characters like period, slash, and backlash is risky when used in methods that interact with the file system. The resource injection attack focuses on accessing other resources than the local filesystem, which is different attack technique known as a Path Manipulation attack.","A resource identifier injection basically means that the attacker can determine which resources are loaded into the web application. An attacker could thus influence the operation of the web application and redirect users to other websites. This attack consists of changing resource identifiers used by an application in order to perform a malicious task. When an application permits a user input to define a resource, like a file name or port number, this data can be manipulated to execute or access different resources. In order to be properly executed, the attacker must have the possibility to specify a resource identifier through the application form and the application must permit the execution. The resource type affected by user input indicates the content type that may be exposed. For example, an application that permits input of special characters like period, slash, and backlash is risky when used in methods that interact with the file system. The resource injection attack focuses on accessing other resources than the local filesystem, which is different attack technique known as a Path Manipulation attack."
Dynamic scripting injection,"When user input is used to evaluate scripting code, highsecurity risks could be introduced. If the input is not properly escaped an attacker can inject his own script code and gain access to the server.","When user input is used to evaluate scripting code, highsecurity risks could be introduced. If the input is not properly escaped an attacker can inject his own script code and gain access to the server."
Regular expression injection,"If the application uses regular expressions which receive user input, then the user input should be properly escaped. If not done properly, then the hacker can affect the regular expression and modify their logic. In some cases, an attacker could even gain access to the server.","If the application uses regular expressions which receive user input, then the user input should be properly escaped. If not done properly, then the hacker can affect the regular expression and modify their logic. In some cases, an attacker could even gain access to the server."
Automated spamming via feedback scripts,A hacker must not gain the ability to abuse an applications email functionality by means of scripts which sends automated spamming mails.,A hacker must not gain the ability to abuse an applications email functionality by means of scripts which sends automated spamming mails.
Session cookies without the Secure attribute,"The secure flag is an option that can be set when creating a cookie. This flag ensures that the cookie will not be sent over an unencrypted connection by the browser,which ensures that the session cookie can not be sent over a nonencrypted link.","The secure flag is an option that can be set when creating a cookie. This flag ensures that the cookie will not be sent over an unencrypted connection by the browser,which ensures that the session cookie can not be sent over a nonencrypted link."
Session cookies without the HttpOnly attribute,An HttpOnly flag is an option that can be set when creating a cookie. This v ensures that the cookie cannot be read or edited by JavaScript. This ensures an attacker cannot steal this cookie as a crosssite scripting vulnerability is present in the application.,An HttpOnly flag is an option that can be set when creating a cookie. This v ensures that the cookie cannot be read or edited by JavaScript. This ensures an attacker cannot steal this cookie as a crosssite scripting vulnerability is present in the application.
External session hijacking,"When an attacker obtains a users session cookie, then he can steal the identity of the user which the session cookie belongs to.","When an attacker obtains a users session cookie, then he can steal the identity of the user which the session cookie belongs to."
Insecure transmission of session cookies,"If the session cookies are sent over an unencrypted connection, they should be withdrawn immediately. These cookies are not to be trusted anymore as a hacker may have captured their values.","If the session cookies are sent over an unencrypted connection, they should be withdrawn immediately. These cookies are not to be trusted anymore as a hacker may have captured their values."
Unproven cryptographic algorithms,"The encryption techniques used in the application must be known and proven methods. When there is a selfmade hashing algorithm developed, it is likely to contain vulnerabilities due to mathflaws resulting in encryption which can be broken.","The encryption techniques used in the application must be known and proven methods. When there is a selfmade hashing algorithm developed, it is likely to contain vulnerabilities due to mathflaws resulting in encryption which can be broken."
Client side authentication,"An application could implement authentication functionalities through JavaScript and HTML. However, these are clientside constraints that are imposed, which means that a hacker can easily disable or modify these constraints.","An application could implement authentication functionalities through JavaScript and HTML. However, these are clientside constraints that are imposed, which means that a hacker can easily disable or modify these constraints."
Identifier based authorization,An application uses parameters in order to process data. These parameters can also be used to assign certain roles and retrieve Content corresponding with those parameters. For example:      www.target.com/index.php?loggedin=user  In this situation the application will get content and subscribe user roles corresponding to the user parameter.      www.target.com/index.php?loggedin=admin  In this situation the application will get content and subscribe user roles corresponding to the admin parameter. (Note: the above two links are no longer available.),An application uses parameters in order to process data. These parameters can also be used to assign certain roles and retrieve Content corresponding with those parameters. For example:      www.target.com/index.php?loggedin=user  In this situation the application will get content and subscribe user roles corresponding to the user parameter.      www.target.com/index.php?loggedin=admin  In this situation the application will get content and subscribe user roles corresponding to the admin parameter. (Note: the above two links are no longer available.)
Principle of complete mediation,"Throughout development of the application, there must be perpetual checks in place to check if all pages and resources by default require authentication except those specifically intended to be public.  Sometimes developers simply forget to implement these checks, or they remove the checks  temporarily for testing purposes.","Throughout development of the application, there must be perpetual checks in place to check if all pages and resources by default require authentication except those specifically intended to be public.  Sometimes developers simply forget to implement these checks, or they remove the checks  temporarily for testing purposes."
Prepared statements and query parameterization,"All SQL queries, HQL, OSQL, NOSQL and stored procedures, related to stored procedures should be protected by the use of query parameterization. If an attacker can inject malicious code into these queries and gain the ability to manipulate them and can withdraw, update and delete data which is stored on the target database.","All SQL queries, HQL, OSQL, NOSQL and stored procedures, related to stored procedures should be protected by the use of query parameterization. If an attacker can inject malicious code into these queries and gain the ability to manipulate them and can withdraw, update and delete data which is stored on the target database."
"Are all passwords hashed, salted and stretched","Verify that account passwords are one way hashed with a salt, and there is sufficient work  factor to defeat brute force and password hash recovery attacks.","Verify that account passwords are one way hashed with a salt, and there is sufficient work  factor to defeat brute force and password hash recovery attacks."
Sensitive information transmitted by unencrypted methods,Whenever sensitive information is sent by unencrypted methods an attacker could intercept this data and use this for malicious intents.,Whenever sensitive information is sent by unencrypted methods an attacker could intercept this data and use this for malicious intents.
Session information is not stored server side,Whenever session information is not stored on the serverside an attacker could easily tamper and manipulate these values. This is always a bad idea and you should not do this!,Whenever session information is not stored on the serverside an attacker could easily tamper and manipulate these values. This is always a bad idea and you should not do this!
The crossdomain xml should only contains trusted domains,"The use of a crossdomain.xml file is required when the web application uses Flash. This file is used to set up restrictions for any other web servers using the flash application. If these are not set correctly, an attacker could exploit this to execute targeted attacks against the users of the web application.","The use of a crossdomain.xml file is required when the web application uses Flash. This file is used to set up restrictions for any other web servers using the flash application. If these are not set correctly, an attacker could exploit this to execute targeted attacks against the users of the web application."
Session ids should be generated with sufficient entropy,"Whenever session IDs are not generated with a sufficient entropy this could lead to a session collision or session hijacking. If an attacker can guess an authenticated user''s session identifier, he can take over the user''s session.","Whenever session IDs are not generated with a sufficient entropy this could lead to a session collision or session hijacking. If an attacker can guess an authenticated user''s session identifier, he can take over the user''s session."
User generated session ids should be rejected by the server,"Whenever user generated session IDs are not rejected by the server, an attacker could change the session credentials given by the server on the targets computer into an easy to remember value.  The attacker then changes his own session credentials with the easily to remember value he used on the target''s computer. Through this,  the attacker could do a session hijacking on the targets current session.","Whenever user generated session IDs are not rejected by the server, an attacker could change the session credentials given by the server on the targets computer into an easy to remember value.  The attacker then changes his own session credentials with the easily to remember value he used on the target''s computer. Through this,  the attacker could do a session hijacking on the targets current session."
The logout functionality should revoke the complete session,"When the logout functionality does not revoke the complete session, an attacker could still impersonate a user when he has access to the session cookie even after the user is logged off the application.","When the logout functionality does not revoke the complete session, an attacker could still impersonate a user when he has access to the session cookie even after the user is logged off the application."
The login functionality should always generate a new session id,Whenever an user is successfully authenticated the application should generate a new session cookie.,Whenever an user is successfully authenticated the application should generate a new session cookie.
Does The application enforce the use of secure passwords,"Applications should encourage the use of strong passwords and passphrases. Preferably the password policy should not put limitations or restrictions on the chosen passwords (for example the length of a password). Whenever the application supports strong passwords and the use of password managers, the possibility for an attacker performing a succesfull bruteforce  attack drops significantly. This also increases the possibility that the application can be used with users'' passwords managers.","Applications should encourage the use of strong passwords and passphrases. Preferably the password policy should not put limitations or restrictions on the chosen passwords (for example the length of a password). Whenever the application supports strong passwords and the use of password managers, the possibility for an attacker performing a succesfull bruteforce  attack drops significantly. This also increases the possibility that the application can be used with users'' passwords managers."
Session IDs do not timeout (idl),"All sessions should implement an idle or inactivity timeout. This timeout defines the amount of time a session will remain active in case there is no activity in the session, closing and invalidating the session upon the defined idle period since the last HTTP request received by the web application for a given session ID. The idle timeout limits the chances an attacker has to guess and use a valid session ID from another user. However, if the attacker is able to hijack a given session, the idle timeout does not limit the attacker''s actions, as he can generate activity on the session periodically to keep the session active for longer periods of time.  Session timeout management and expiration must be enforced on the serverside. If the client is used to enforce the session timeout, for example using the session token or other client parameters to track time references (e.g. number of minutes since login time), an attacker could manipulate these to extend the session duration.","All sessions should implement an idle or inactivity timeout. This timeout defines the amount of time a session will remain active in case there is no activity in the session, closing and invalidating the session upon the defined idle period since the last HTTP request received by the web application for a given session ID. The idle timeout limits the chances an attacker has to guess and use a valid session ID from another user. However, if the attacker is able to hijack a given session, the idle timeout does not limit the attacker''s actions, as he can generate activity on the session periodically to keep the session active for longer periods of time.  Session timeout management and expiration must be enforced on the serverside. If the client is used to enforce the session timeout, for example using the session token or other client parameters to track time references (e.g. number of minutes since login time), an attacker could manipulate these to extend the session duration."
Directory listing,"Whenever directory listing is enabled, an attacker could gain sensitive information about the systems hierarchical structure and gain knowledge about directories or files which should possibly not be publicly accessible. An attacker could use this information to increase his attack vector. In some cases this could even lead to an attacker gaining knowledge about credentials or old vulnerable system demo functions which might lead to remote code execution.","Whenever directory listing is enabled, an attacker could gain sensitive information about the systems hierarchical structure and gain knowledge about directories or files which should possibly not be publicly accessible. An attacker could use this information to increase his attack vector. In some cases this could even lead to an attacker gaining knowledge about credentials or old vulnerable system demo functions which might lead to remote code execution."
Unnecessary features enabled or installed,Whenever there are unnecessary features enabled or installed this could increase the attack surface of an attacker which could lead to serious danger such as XXE/CMD/XSS injections.,Whenever there are unnecessary features enabled or installed this could increase the attack surface of an attacker which could lead to serious danger such as XXE/CMD/XSS injections.
Avoid the use of default and predictable acounts.,Whenever default or predictable accounts are available on an application/server this could lead to an attacker compromising these services. Make sure all default and predictable accounts are disabled or deleted from the services.,Whenever default or predictable accounts are available on an application/server this could lead to an attacker compromising these services. Make sure all default and predictable accounts are disabled or deleted from the services.
Security settings in your development frameworks,"Whenever certain security settings in your application frameworks (e.g., Struts, Spring, ASP.NET) and libraries are not set to secure values, this could lead to vulnerabilities in your application which an attacker could exploit.","Whenever certain security settings in your application frameworks (e.g., Struts, Spring, ASP.NET) and libraries are not set to secure values, this could lead to vulnerabilities in your application which an attacker could exploit."
Insecure datastorage,"When the browser has to guess the charset according to the content that is presented by the application, then this could lead to XSS injections when the guess is wrong.","When the browser has to guess the charset according to the content that is presented by the application, then this could lead to XSS injections when the guess is wrong."
Extraneous files in document root,"Whenever the document root contains extraneous files, these files could be accessed by an attacker or could possibly contain functionality which could contain other vulnerabilities.","Whenever the document root contains extraneous files, these files could be accessed by an attacker or could possibly contain functionality which could contain other vulnerabilities."
Username enumeration,"Whenever an application generates an error like:  ""This username already exists""  An attacker could enumerate these usernames, enlarging his chance for a successful bruteforce attack. Same goes for ""Password forget"" functions.  Whenever an user forgets his password, make him fill in his email address rather than an username.","Whenever an application generates an error like:  ""This username already exists""  An attacker could enumerate these usernames, enlarging his chance for a successful bruteforce attack. Same goes for ""Password forget"" functions.  Whenever an user forgets his password, make him fill in his email address rather than an username."
HTTP header injection,"HTTP header injection is a general class of web application security vulnerability which occurs when Hypertext Transfer Protocol (HTTP) headers are dynamically generated based on user input. Header injection in HTTP responses can allow for HTTP response splitting (also known as CRLF, Carriage Return Line Feed), Session fixation via the SetCookie header, crosssite scripting (XSS), and malicious redirect attacks via the location header. HTTP header injection is a relatively new area for webbased attacks, and has primarily been pioneered by Amit Klein in his work on request/response smuggling/splitting. Vulnerabilities due to HTTP header injections such as CRLF are no longer feasible due to the fact that multiple header requests are not possible.","HTTP header injection is a general class of web application security vulnerability which occurs when Hypertext Transfer Protocol (HTTP) headers are dynamically generated based on user input. Header injection in HTTP responses can allow for HTTP response splitting (also known as CRLF, Carriage Return Line Feed), Session fixation via the SetCookie header, crosssite scripting (XSS), and malicious redirect attacks via the location header. HTTP header injection is a relatively new area for webbased attacks, and has primarily been pioneered by Amit Klein in his work on request/response smuggling/splitting. Vulnerabilities due to HTTP header injections such as CRLF are no longer feasible due to the fact that multiple header requests are not possible."
GET POST requests,"Authors of services which use the HTTP protocol SHOULD NOT use GETbased forms for the submission of sensitive data, because this will cause this data to be encoded in the RequestURI. Many existing servers, proxies, and browsers will log the request URL in some place where it might be visible to third parties. Servers can use POSTbased form submission instead. GET parameters are also more likely to be vulnerable to XSS. Please refer to the XSS manual in the knowledge base for more information.","Authors of services which use the HTTP protocol SHOULD NOT use GETbased forms for the submission of sensitive data, because this will cause this data to be encoded in the RequestURI. Many existing servers, proxies, and browsers will log the request URL in some place where it might be visible to third parties. Servers can use POSTbased form submission instead. GET parameters are also more likely to be vulnerable to XSS. Please refer to the XSS manual in the knowledge base for more information."
Insecure internal communication,"Whenever organizations communicate by means of unencrypted connections, an attacker could easily sniff insecure communications and access sensitive information.","Whenever organizations communicate by means of unencrypted connections, an attacker could easily sniff insecure communications and access sensitive information."
Sensitive information stored alongside the source code,"Sometimes when developing an application a programmer stores a password or other credentials into the sourcecode as a comment for other developers to login into the application. When these comments still exist in a live environment, an attacker could use these credentials to gain access to the system.","Sometimes when developing an application a programmer stores a password or other credentials into the sourcecode as a comment for other developers to login into the application. When these comments still exist in a live environment, an attacker could use these credentials to gain access to the system."
The possible risks to the application must be documented,"The information that is stored of the application and/or user activities needs to be documented, this will make it transparent where sensitive information is stored and why.","The information that is stored of the application and/or user activities needs to be documented, this will make it transparent where sensitive information is stored and why."
Possible attackers of the application must be documented,"Authentication decisions should be logged along with relevant metadata for security  investigations. This information could for example, be used whenever there is suspicion about accounts being compromised. Also, passwords and other sensitive information should never be stored in these log files. Whenever an attacker gains knowledge of these files, this information could be used to compromise other accounts.   Note: ""Usernames should also never be stored in the log files, users are not always paying attention to their actions and sometimes provide the username form field with their password. If the application would log the usernames, these passwords are now also stored and can be used to compromise accounts whenever an attacker gains knowledge of these files.","Authentication decisions should be logged along with relevant metadata for security  investigations. This information could for example, be used whenever there is suspicion about accounts being compromised. Also, passwords and other sensitive information should never be stored in these log files. Whenever an attacker gains knowledge of these files, this information could be used to compromise other accounts.   Note: ""Usernames should also never be stored in the log files, users are not always paying attention to their actions and sometimes provide the username form field with their password. If the application would log the usernames, these passwords are now also stored and can be used to compromise accounts whenever an attacker gains knowledge of these files."
Audit logs,"An audit trail (also called audit log) is a securityrelevant chronological record, set of records, and/or destination and source of records that provide documentary evidence of the sequence of activities that have affected at any time a specific operation, procedure, or event.","An audit trail (also called audit log) is a securityrelevant chronological record, set of records, and/or destination and source of records that provide documentary evidence of the sequence of activities that have affected at any time a specific operation, procedure, or event."
User credentials in audit logs,"Whenever there are user credentials supplied in an audit log, this could become a risk whenever an attacker could gain access to one of these log files.","Whenever there are user credentials supplied in an audit log, this could become a risk whenever an attacker could gain access to one of these log files."
Intrusion detecting and reporting,All possible attacks on your application should be detected and reported in order to prevent further escalation.,All possible attacks on your application should be detected and reported in order to prevent further escalation.
Authentication at a central location,"Authentication should always be performed at a central location in the application, in order to prevent missing authentication on certain levels in the application.","Authentication should always be performed at a central location in the application, in order to prevent missing authentication on certain levels in the application."
IP adresses in internal HTTP headers,"Whenever IP addresses are used in HTTP headers in internal structures of your organization, an attacker could use these to enlarge his attack vector and reconstruct your internal infrastructures.","Whenever IP addresses are used in HTTP headers in internal structures of your organization, an attacker could use these to enlarge his attack vector and reconstruct your internal infrastructures."
Authentication enforced by the web sever,"Authentication should be enforced by the webserver. Whenever these configurations are not enforced on the server, an attacker could gain access to authorized pages on your application.","Authentication should be enforced by the webserver. Whenever these configurations are not enforced on the server, an attacker could gain access to authorized pages on your application."
The audit log must include a priority system,"If the audit log does not contain a clear priority system, it will be difficult to prioritize different types of process failures.","If the audit log does not contain a clear priority system, it will be difficult to prioritize different types of process failures."
Servers must not be trusted without explicit authentication,"Whenever the server your webapplication is connecting towards is not using any form of explicit authentication and is internet facing, then this means the server cannot be trusted. This is because the server can be potentially be owned and managed by everybody including hackers.","Whenever the server your webapplication is connecting towards is not using any form of explicit authentication and is internet facing, then this means the server cannot be trusted. This is because the server can be potentially be owned and managed by everybody including hackers."
Ensure overall security,"The primairy authentication mechanism is most often a good hardened functionality because it gets a lot of attention during development. However, this is mostly not the case for secondary authentication mechanisms such as password forget functions, or  other alternative paths that could lead to authenticating to the target application.","The primairy authentication mechanism is most often a good hardened functionality because it gets a lot of attention during development. However, this is mostly not the case for secondary authentication mechanisms such as password forget functions, or  other alternative paths that could lead to authenticating to the target application."
Re authentication,"Whenever a user is changing credentials such as his password, the user should always be challenged by the application to reauthenticate himself. This is in order to prevent an attacker from changing credentials if ever an attacker could hijack another users session.","Whenever a user is changing credentials such as his password, the user should always be challenged by the application to reauthenticate himself. This is in order to prevent an attacker from changing credentials if ever an attacker could hijack another users session."
No shared knowledge for secret questions,"Whenever an application ask an user a secret question i.e a password forgot functionality, these questions should not be shared knowledge an attacker could get from the web to prevent him compromising the account by this function.","Whenever an application ask an user a secret question i.e a password forgot functionality, these questions should not be shared knowledge an attacker could get from the web to prevent him compromising the account by this function."
Disallow the use of old passwords,"This is a mitigation of the risk that a password can leak by any means towards a possible attacker. Because of password reuse, this could happen not only due to a leak in your site. Changing the password to a new one minimizes the damage.  Also, users really don''t like changing their passwords. So what users used to do when forced to change their password was to change it twice  once to some temporary password and then a second time back to the original password.","This is a mitigation of the risk that a password can leak by any means towards a possible attacker. Because of password reuse, this could happen not only due to a leak in your site. Changing the password to a new one minimizes the damage.  Also, users really don''t like changing their passwords. So what users used to do when forced to change their password was to change it twice  once to some temporary password and then a second time back to the original password."
Absolute session time out,"All sessions should implement an absolute timeout, regardless of session activity. This timeout defines the maximum amount of time a session can be active, closing and invalidating the session upon the defined absolute period since the given session was initially created by the web application. After invalidating the session, the user is forced to (re)authenticate again in the web application and establish a new session. The absolute session limits the amount of time an attacker can use a hijacked session and impersonate the victim user.","All sessions should implement an absolute timeout, regardless of session activity. This timeout defines the maximum amount of time a session can be active, closing and invalidating the session upon the defined absolute period since the given session was initially created by the web application. After invalidating the session, the user is forced to (re)authenticate again in the web application and establish a new session. The absolute session limits the amount of time an attacker can use a hijacked session and impersonate the victim user."
Logout structuring,Placing a logout link on every page that requires authentication helps the user end the session when he is done with the site. Ending the session helps prevent hijacking.,Placing a logout link on every page that requires authentication helps the user end the session when he is done with the site. Ending the session helps prevent hijacking.
Verify that the sensitive information is never disclosed,"Information exposure through query strings in URL is when sensitive data is passed to parameters in the URL. This allows attackers to obtain sensitive data such as usernames, passwords, tokens (authX), database details, and any other potentially sensitive data. Simply using HTTPS does not resolve this vulnerability.  Regardless of using encryption, the following URL will expose information in the locations detailed below: https://vulnerablehost.com/authuser?user=bob&authz_token=1234&expire=1500000000  The parameter values for ''user'', ''authz_token'', and ''expire'' will be exposed in the following locations  when using HTTP or HTTPS:   Referer Header  Web Logs  Shared Systems  Browser History  Browser Cache  Shoulder Surfing  When not using an encrypted channel, all of the above and the following:  ManintheMiddle","Information exposure through query strings in URL is when sensitive data is passed to parameters in the URL. This allows attackers to obtain sensitive data such as usernames, passwords, tokens (authX), database details, and any other potentially sensitive data. Simply using HTTPS does not resolve this vulnerability.  Regardless of using encryption, the following URL will expose information in the locations detailed below: https://vulnerablehost.com/authuser?user=bob&authz_token=1234&expire=1500000000  The parameter values for ''user'', ''authz_token'', and ''expire'' will be exposed in the following locations  when using HTTP or HTTPS:   Referer Header  Web Logs  Shared Systems  Browser History  Browser Cache  Shoulder Surfing  When not using an encrypted channel, all of the above and the following:  ManintheMiddle"
Session Domain cookies,The Domain option allows you to specify whether or not to send the cookie to subdomains.,The Domain option allows you to specify whether or not to send the cookie to subdomains.
Access control failure,"Handling errors securely is a key aspect of secure coding. There are two types of errors that deserve special attention. The first is exceptions that occur in the processing of a security control itself. It is important that these exceptions do not enable behavior that the countermeasures would normally not allow. As a developer, you should consider that there are generally three possible outcomes from a security mechanism:    allow the operation  disallow the operation  exception   in general you should design your security mechanism so that a failure will follow the same execution path as disallowing the operation.","Handling errors securely is a key aspect of secure coding. There are two types of errors that deserve special attention. The first is exceptions that occur in the processing of a security control itself. It is important that these exceptions do not enable behavior that the countermeasures would normally not allow. As a developer, you should consider that there are generally three possible outcomes from a security mechanism:    allow the operation  disallow the operation  exception   in general you should design your security mechanism so that a failure will follow the same execution path as disallowing the operation."
Input rejection,"Whenever the application detects malicious or unexpected userinput, you want to make sure the application actual rejects the submitted userinput rather than directly process it.","Whenever the application detects malicious or unexpected userinput, you want to make sure the application actual rejects the submitted userinput rather than directly process it."
Input validation,"To ensure that the application is robust against all forms of input data, this data should be sanitized and/or encoded on serverside since an attacker could otherwise easy bypass these checks with an intercepting proxy.","To ensure that the application is robust against all forms of input data, this data should be sanitized and/or encoded on serverside since an attacker could otherwise easy bypass these checks with an intercepting proxy."
Single input validation controls,"Input validation refers to the process of validating all the input to an application before using it. Input validation is absolutely critical to application security, and most application risks involve tainted input at some level.","Input validation refers to the process of validating all the input to an application before using it. Input validation is absolutely critical to application security, and most application risks involve tainted input at some level."
Logging validation failures,When you log all the input validation failures in your application you can discover in an early stage that your application is under attack and take quick countermeasures against the attackers.,When you log all the input validation failures in your application you can discover in an early stage that your application is under attack and take quick countermeasures against the attackers.
Logging implemented on the serverside,Logging should always be implemented on the serverside since an attacker otherwise  manipulates the functionality and erases his traces.,Logging should always be implemented on the serverside since an attacker otherwise  manipulates the functionality and erases his traces.
Logging guidelines,The logging should contain some guidelines in order to organize your logging file in such a way it  would allow for a detailed investigation of the timeline when an event happens.,The logging should contain some guidelines in order to organize your logging file in such a way it  would allow for a detailed investigation of the timeline when an event happens.
Log viewing software code injection,"Whenever user supplied input is being handled into log viewing software, this software can be manipulated by potential attackers whenever this input is not properly being sanitized before outputting in the software. Depending on the context of where the supplied input is being used this could lead to an entire subset of attacks.","Whenever user supplied input is being handled into log viewing software, this software can be manipulated by potential attackers whenever this input is not properly being sanitized before outputting in the software. Depending on the context of where the supplied input is being used this could lead to an entire subset of attacks."
CA certificates,"In cryptography, a certificate authority or certification authority (CA) is an entity that issues digital certificates. A digital certificate certifies the ownership of a public key by the named subject of the certificate. Sometimes it happens that a CA goes bad and is revoked from the browser. This will lead to untrusted TLS connections if your application uses an issued certificate from this CA.  A selfsigned certificate is an identity certificate that is signed by the same entity whose identity it certifies. This term has nothing to do with the identity of the person or organization that actually performed the signing procedure. In technical terms a selfsigned certificate is one signed with its own private key.  In typical public key infrastructure (PKI) arrangements, a digital signature from a certificate authority (CA) attests that a particular public key certificate is valid. Each CA has one or more root keys; and the certificates associated with those public keys are ""trust anchors"" that use a special type of selfsigned certificates. Establishing trust of the CA root certificate is dependent upon procedures beyond checking its digital signature.","In cryptography, a certificate authority or certification authority (CA) is an entity that issues digital certificates. A digital certificate certifies the ownership of a public key by the named subject of the certificate. Sometimes it happens that a CA goes bad and is revoked from the browser. This will lead to untrusted TLS connections if your application uses an issued certificate from this CA.  A selfsigned certificate is an identity certificate that is signed by the same entity whose identity it certifies. This term has nothing to do with the identity of the person or organization that actually performed the signing procedure. In technical terms a selfsigned certificate is one signed with its own private key.  In typical public key infrastructure (PKI) arrangements, a digital signature from a certificate authority (CA) attests that a particular public key certificate is valid. Each CA has one or more root keys; and the certificates associated with those public keys are ""trust anchors"" that use a special type of selfsigned certificates. Establishing trust of the CA root certificate is dependent upon procedures beyond checking its digital signature."
All connections should be TLS,"Whenever an application provides TLS, all connections should be TLS otherwise the encryption will be lost.","Whenever an application provides TLS, all connections should be TLS otherwise the encryption will be lost."
Log TLS connection failures,Failing TLS connections should always be logged. This is a great indicator that ''something'' is wrong.,Failing TLS connections should always be logged. This is a great indicator that ''something'' is wrong.
Content type headers,"Setting the right content headers is important for hardening your applications security, this reduces exposure to driveby download attacks or sites serving user uploaded content that, by clever naming could be treated by MS Internet Explorer as executable or dynamic HTML files and thus can lead to security vulnerabilities.","Setting the right content headers is important for hardening your applications security, this reduces exposure to driveby download attacks or sites serving user uploaded content that, by clever naming could be treated by MS Internet Explorer as executable or dynamic HTML files and thus can lead to security vulnerabilities."
Malicious intent,Before pushing a code live you should check the software for malicious code in order to make sure no developers with evil intent made backdoors or deliberately put in exploits.  Dependencies and third party libraries should also be validated against malicious code. These depedencies and libraries should also be validated for known vulnerabilities (CVE),Before pushing a code live you should check the software for malicious code in order to make sure no developers with evil intent made backdoors or deliberately put in exploits.  Dependencies and third party libraries should also be validated against malicious code. These depedencies and libraries should also be validated for known vulnerabilities (CVE)
Sandboxing,"A sandbox is a security mechanism for separating running programs. It is often used to execute untested code, or untrusted programs from unverified third parties, suppliers, untrusted users and untrusted websites. It''s creating an extra layer of security where an attacker first needs to break out from.","A sandbox is a security mechanism for separating running programs. It is often used to execute untested code, or untrusted programs from unverified third parties, suppliers, untrusted users and untrusted websites. It''s creating an extra layer of security where an attacker first needs to break out from."
Repudiation attack,"A repudiation attack happens when an application or system does not adopt controls to properly track and log users actions, thus permitting malicious manipulation or forging the identification of new actions. This attack can be used to change the authoring information of actions executed by a malicious user in order to log wrong data to log files. Its usage can be extended to general data manipulation in the name of others, in a similar manner as spoofing mail messages. If this attack takes place, the data stored in log files can be considered invalid or misleading.","A repudiation attack happens when an application or system does not adopt controls to properly track and log users actions, thus permitting malicious manipulation or forging the identification of new actions. This attack can be used to change the authoring information of actions executed by a malicious user in order to log wrong data to log files. Its usage can be extended to general data manipulation in the name of others, in a similar manner as spoofing mail messages. If this attack takes place, the data stored in log files can be considered invalid or misleading."
Server side validation,Validation of user supplied input must always be enforced on the server side. Whenever validation of the input is being perfomed on the client side then the constraints can easilly be bypassed whenever an attacker uses an intercepting proxy which he can use to tamper data after they have been validated and send to the server.   Or the attacker can simply change the constraint on the client side in his browser to bypass the  constraints.,Validation of user supplied input must always be enforced on the server side. Whenever validation of the input is being perfomed on the client side then the constraints can easilly be bypassed whenever an attacker uses an intercepting proxy which he can use to tamper data after they have been validated and send to the server.   Or the attacker can simply change the constraint on the client side in his browser to bypass the  constraints.
Privilege escalation,Attackers with low access rights wil always try to elevate their privileges in order to get more sensitive information/functionalities at their disposal. This can be achieved by for example:    Functions that fail to check authorization   Compromised functions/services that run with higher privileges   Compromised user accounts with higher privileges  These examples just scratch the surface of what attackers will try in order to elevate their privilages on your application/system. Therefore it is very important to take this reccomendation high into account.,Attackers with low access rights wil always try to elevate their privileges in order to get more sensitive information/functionalities at their disposal. This can be achieved by for example:    Functions that fail to check authorization   Compromised functions/services that run with higher privileges   Compromised user accounts with higher privileges  These examples just scratch the surface of what attackers will try in order to elevate their privilages on your application/system. Therefore it is very important to take this reccomendation high into account.
Enforce sequential step order,"Whenever a functionality consists out of following several steps to achieve some goal i.e,  User adds items to chart > User enters shipping information > User pays for goods > Items will be shipped. You want to make sure the user can not skip the payment step in order to receive his goods.","Whenever a functionality consists out of following several steps to achieve some goal i.e,  User adds items to chart > User enters shipping information > User pays for goods > Items will be shipped. You want to make sure the user can not skip the payment step in order to receive his goods."
Step up or adaptive authentication,Whenever a user browses a section of a webbased application that contains sensitive information the user should be challenged authenticate again using a higher assurance credential to be granted access to this information. This is to prevent attackers from reading sensitive information after they successfully hijacked a user account.,Whenever a user browses a section of a webbased application that contains sensitive information the user should be challenged authenticate again using a higher assurance credential to be granted access to this information. This is to prevent attackers from reading sensitive information after they successfully hijacked a user account.
Cross origin resource sharing,"Cross Origin Resource Sharing or CORS is a mechanism that enables a web browser to perform ''crossdomain'' requests using the XMLHttpRequest L2 API in a controlled manner. In the past, the XMLHttpRequest L1 API only allowed requests to be sent within the same origin as it was restricted by the same origin policy.","Cross Origin Resource Sharing or CORS is a mechanism that enables a web browser to perform ''crossdomain'' requests using the XMLHttpRequest L2 API in a controlled manner. In the past, the XMLHttpRequest L1 API only allowed requests to be sent within the same origin as it was restricted by the same origin policy."
Prevent password pre filling,"Passwords should never be stored plaintext or in a reversible format on the application. Whenever an attacker hacks  into the applications SQL database the passwords are directly compromised. In the case of prefilled forms in the application, an attacker could also hijack the credentials by badly configured CORS rules or XSS attacks.","Passwords should never be stored plaintext or in a reversible format on the application. Whenever an attacker hacks  into the applications SQL database the passwords are directly compromised. In the case of prefilled forms in the application, an attacker could also hijack the credentials by badly configured CORS rules or XSS attacks."
All authentication controls must fail securely,"Handling errors securely is a key aspect of secure coding. There are two types of errors that deserve special attention. The first is exceptions that occur in the processing of a security control itself. It''s important that these exceptions do not enable behavior that the countermeasure would normally not allow. As a developer, you should consider that there are generally three possible outcomes from a security mechanism:  1. Allow the operation 2. Disallow the operation 3. Exception  In general, you should design your security mechanism so that a failure will follow the same execution path as disabling the operation","Handling errors securely is a key aspect of secure coding. There are two types of errors that deserve special attention. The first is exceptions that occur in the processing of a security control itself. It''s important that these exceptions do not enable behavior that the countermeasure would normally not allow. As a developer, you should consider that there are generally three possible outcomes from a security mechanism:  1. Allow the operation 2. Disallow the operation 3. Exception  In general, you should design your security mechanism so that a failure will follow the same execution path as disabling the operation"
Forget password functions,"Verify the system can protect against aggregation or continuous access of secured functions, resources, or data. For example, possibly by the use of a resource governor to limit the number of edits per hour or to prevent the entire database from being scraped by an individual user.","Verify the system can protect against aggregation or continuous access of secured functions, resources, or data. For example, possibly by the use of a resource governor to limit the number of edits per hour or to prevent the entire database from being scraped by an individual user."
Canonicalized user input,Whenever userinput is partially validated there is a high probability that the application misses a malicious input which could execute a successful attack on your application.,Whenever userinput is partially validated there is a high probability that the application misses a malicious input which could execute a successful attack on your application.
Approved random number generator,"The lack of entropy available for, or used by, a pseudorandom number generator can be a stability and security threat.","The lack of entropy available for, or used by, a pseudorandom number generator can be a stability and security threat."
Validated cryptographic modules,The National Institute of Standards and Technology (NIST) issued the FIPS 140 Publication Series to coordinate the requirements and standards for cryptography modules that include both hardware and software components. Protection of a cryptographic module within a security system is necessary to maintain the confidentiality and integrity of the information protected by the module.,The National Institute of Standards and Technology (NIST) issued the FIPS 140 Publication Series to coordinate the requirements and standards for cryptography modules that include both hardware and software components. Protection of a cryptographic module within a security system is necessary to maintain the confidentiality and integrity of the information protected by the module.
Policy for managing cryptographic keys,"When there is no policy for managing your cryptographic keys, expired or revoked keys that could unknowingly be used again thus becoming a threat for your encrypted data.","When there is no policy for managing your cryptographic keys, expired or revoked keys that could unknowingly be used again thus becoming a threat for your encrypted data."
HTTPS and weakly or unencrypted links,Imagine the scenario where you have a login form and an application which supports HTTPS. Whenever the initial connection (login.php) is not HTTPS and after login (loggedin.php) will be HTTPS the username and password will not be sent through an encrypted manner thus could be easily compromised by attackers. This principle also applies to sending vulnerable data towards other unencrypted/weak encrypted links in your application.,Imagine the scenario where you have a login form and an application which supports HTTPS. Whenever the initial connection (login.php) is not HTTPS and after login (loggedin.php) will be HTTPS the username and password will not be sent through an encrypted manner thus could be easily compromised by attackers. This principle also applies to sending vulnerable data towards other unencrypted/weak encrypted links in your application.
Error handling on trusted devices,Whenever error handling is not applied through trusted devices the errors it supplies can not be trusted since they can be tampered with.,Whenever error handling is not applied through trusted devices the errors it supplies can not be trusted since they can be tampered with.
Single application level logging,"Whenever the application contains a single applicationlevel logging implementation it becomes clear, transparent and easy to maintain. It also reduces the possibility that you overlook high priority logging.","Whenever the application contains a single applicationlevel logging implementation it becomes clear, transparent and easy to maintain. It also reduces the possibility that you overlook high priority logging."
Aggregate user requests,"Verify the system can protect against aggregation or continuous access to functions,   resources, or data. For example, possibly by the use of a resource governor to limit the number of edits per minute in order to to prevent an automatic attack","Verify the system can protect against aggregation or continuous access to functions,   resources, or data. For example, possibly by the use of a resource governor to limit the number of edits per minute in order to to prevent an automatic attack"
Principle of least privilege,"The principle of least privilege recommends that accounts have the least amount of privilege required to perform their business processes. This encompasses user rights, resource permissions such as CPU limits, memory, network, and file system permissions.","The principle of least privilege recommends that accounts have the least amount of privilege required to perform their business processes. This encompasses user rights, resource permissions such as CPU limits, memory, network, and file system permissions."
TLS implementation must operate in an approved mode of operation,To enforce the maximum amount of security out of the TLS implementation it should always suffice the approved mode of operation.,To enforce the maximum amount of security out of the TLS implementation it should always suffice the approved mode of operation.
Character encoding,"Character encoding is the process of mapping characters, numbers and other symbols to a standard format. Typically, this is done to create a message ready for transmission between sender and receiver. It is, in simple terms, the conversion of characters (belonging to different languages like English, Chinese, Greek or any other known language) into bytes. An example of a widely used character encoding scheme is the American Standard Code for Information Interchange (ASCII) that initially used 7bit codes. More recent examples of encoding schemes would be the Unicode UTF8 and UTF16 computing industry standards. In the space of application security and due to the plethora of encoding schemes available, character encoding has a popular misuse. It is being used for encoding malicious injection strings in a way that obfuscates them. This can lead to the bypass of input validation filters, or take advantage of particular ways in which browsers render encoded text.","Character encoding is the process of mapping characters, numbers and other symbols to a standard format. Typically, this is done to create a message ready for transmission between sender and receiver. It is, in simple terms, the conversion of characters (belonging to different languages like English, Chinese, Greek or any other known language) into bytes. An example of a widely used character encoding scheme is the American Standard Code for Information Interchange (ASCII) that initially used 7bit codes. More recent examples of encoding schemes would be the Unicode UTF8 and UTF16 computing industry standards. In the space of application security and due to the plethora of encoding schemes available, character encoding has a popular misuse. It is being used for encoding malicious injection strings in a way that obfuscates them. This can lead to the bypass of input validation filters, or take advantage of particular ways in which browsers render encoded text."
HTTP request methods,"HTTP offers a number of methods that can be used to perform actions on the web server. Many of these methods are designed to aid developers in deploying and testing HTTP applications. These HTTP methods can be used for nefarious purposes if the web server is misconfigured. It recommended to read about the different available methods, their purposes and limitations.  Available method are:  GET The GET method requests a representation of the specified resource. Requests using GET should only retrieve data and should have no other effect. (This is also true of some other HTTP methods.)[1] The W3C has published guidance principles on this distinction, saying, ""Web application design should be informed by the above principles, but also by the relevant limitations.  HEAD The HEAD method asks for a response identical to that of a GET request, but without the response body. This is useful for retrieving metainformation written in response headers, without having to transport the entire content.  POST The POST method requests that the server accept the entity enclosed in the request as a new subordinate of the web resource identified by the URI. The data POSTed might be, for example, an annotation for existing resources; a message for a bulletin board, newsgroup, mailing list, or comment thread; a block of data that is the result of submitting a web form to a datahandling process; or an item to add to a database.","HTTP offers a number of methods that can be used to perform actions on the web server. Many of these methods are designed to aid developers in deploying and testing HTTP applications. These HTTP methods can be used for nefarious purposes if the web server is misconfigured. It recommended to read about the different available methods, their purposes and limitations.  Available method are:  GET The GET method requests a representation of the specified resource. Requests using GET should only retrieve data and should have no other effect. (This is also true of some other HTTP methods.)[1] The W3C has published guidance principles on this distinction, saying, ""Web application design should be informed by the above principles, but also by the relevant limitations.  HEAD The HEAD method asks for a response identical to that of a GET request, but without the response body. This is useful for retrieving metainformation written in response headers, without having to transport the entire content.  POST The POST method requests that the server accept the entity enclosed in the request as a new subordinate of the web resource identified by the URI. The data POSTed might be, for example, an annotation for existing resources; a message for a bulletin board, newsgroup, mailing list, or comment thread; a block of data that is the result of submitting a web form to a datahandling process; or an item to add to a database."
Verbose version information,Revealing system data or debugging information helps an adversary learn about the system and form a plan of attack. An information leak occurs when system data or debugging information leaves the program through an output stream or logging function.,Revealing system data or debugging information helps an adversary learn about the system and form a plan of attack. An information leak occurs when system data or debugging information leaves the program through an output stream or logging function.
HTTP headers added by a frontend,"There are some kind of headers that uses tokens such as Bearer or JWT which are signed or calculated using a key, by the server that creates it.","There are some kind of headers that uses tokens such as Bearer or JWT which are signed or calculated using a key, by the server that creates it."
Session management control,The ability to restrict and maintain user actions within unique sessions is critical to web security. Most users of this guide will be using an application framework with built in session management capabilities. Others will use languages such as Perl CGI that do not. Those without a built in session management system and those who override the existing session management systems are at an immediate disadvantage. Implementations built from scratch are often weak and breakable. Developers are strongly discouraged from implementing their own Session Management.,The ability to restrict and maintain user actions within unique sessions is critical to web security. Most users of this guide will be using an application framework with built in session management capabilities. Others will use languages such as Perl CGI that do not. Those without a built in session management system and those who override the existing session management systems are at an immediate disadvantage. Implementations built from scratch are often weak and breakable. Developers are strongly discouraged from implementing their own Session Management.
Available log analysis tools,"With a log analysis tool in place, you can easily and quickly do forensics as soon as you notice your application is under attack by attackers and block them out.","With a log analysis tool in place, you can easily and quickly do forensics as soon as you notice your application is under attack by attackers and block them out."
Distinguish log,Whenever log fields are distinguished from each other by means of logs from trusted and untrusted log fields in your log entries your logs become clearer and more transparent.,Whenever log fields are distinguished from each other by means of logs from trusted and untrusted log fields in your log entries your logs become clearer and more transparent.
Sanitise sensitive data rapidly from memory,"Whenever sensitive data is rapidly removed from the systems’ memory, this decreases the possibility the attacker has to compromise this data by means of memory dumping attacks.","Whenever sensitive data is rapidly removed from the systems’ memory, this decreases the possibility the attacker has to compromise this data by means of memory dumping attacks."
Logging is performed before executing the transaction,"Whenever the logging is performed before executing a transaction you can be ensured that the transactions are logged. This increases the integrity of your log files. If logging is performed after executing a transaction and an attacker does a succcessful attack, then the logging part may not be reached and no trace would be recorded for the attack.","Whenever the logging is performed before executing a transaction you can be ensured that the transactions are logged. This increases the integrity of your log files. If logging is performed after executing a transaction and an attacker does a succcessful attack, then the logging part may not be reached and no trace would be recorded for the attack."
Verify integrity using checksums,"Always use checksums when working with interpreted code, libraries, executables, and configuration files, when these checksums do not match you can determine that these files are corrupted or backdoored.","Always use checksums when working with interpreted code, libraries, executables, and configuration files, when these checksums do not match you can determine that these files are corrupted or backdoored."
Deny access from remote resources or systems,You should always fend off remote connections with untrusted systems/resources which try to connect to your application in order to prevent connecting to malicious systems that try to attack your application.,You should always fend off remote connections with untrusted systems/resources which try to connect to your application in order to prevent connecting to malicious systems that try to attack your application.
Certificate paths revocation information,Whenever your certificate authority is not trusted anymore you should always be able to recall these certificates ASAP to prevent man in the middle attacks on your applications users.,Whenever your certificate authority is not trusted anymore you should always be able to recall these certificates ASAP to prevent man in the middle attacks on your applications users.
HTML Caching and client side caching,"Developers creating HTML5 applications can create fully offlineaware applications using the HTML5 ApplicationCache interface. The Application Cache uses a cache manifest file to specify which files in an HTML5 application can be used offline, and which files require a network connection.","Developers creating HTML5 applications can create fully offlineaware applications using the HTML5 ApplicationCache interface. The Application Cache uses a cache manifest file to specify which files in an HTML5 application can be used offline, and which files require a network connection."
Cryptographic modules should operate in their approved mode according to their published security policies,Whenever cryptographic modules do not operate in their approved mode according to their published security policies these methods could become weak and become inadequate to ensure strong ciphers.,Whenever cryptographic modules do not operate in their approved mode according to their published security policies these methods could become weak and become inadequate to ensure strong ciphers.
Sending data parameters to untrusted devices,Whenever an application sends data/parameters to untrusted devices this data could be compromised if the device has malicious intents.,Whenever an application sends data/parameters to untrusted devices this data could be compromised if the device has malicious intents.
Proces high value business logic flows in a trusted environment,Whenever highvalue business logic flows are processed in a trusted monitored environment it reduces the movability of an attacker and chances of succeeding to perform successful attacks. If an attacker should breach your application his actions could be rapidly followed and countermeasures could be taken.,Whenever highvalue business logic flows are processed in a trusted monitored environment it reduces the movability of an attacker and chances of succeeding to perform successful attacks. If an attacker should breach your application his actions could be rapidly followed and countermeasures could be taken.
Data from untrusted sources,Always enforce multiple layers of security whenever you want to protect sensitive data/files on your application. If one layer should fail the other layers should prevent the attackers from succeeding.,Always enforce multiple layers of security whenever you want to protect sensitive data/files on your application. If one layer should fail the other layers should prevent the attackers from succeeding.
Runtime environment,Whenever you use runtime environments you want to make sure these are not susceptible for buffer overflows since this could lead to compromise of your application.,Whenever you use runtime environments you want to make sure these are not susceptible for buffer overflows since this could lead to compromise of your application.
Automatic parameter binding,"If the application framework allows automatic mass parameter assignment (also called automatic variable binding) from the inbound request to a model, verify that security sensitive fields such as ''accountBalance'', ''role'' or ''password'' are protected from malicious automatic binding. Whenever your application takes parameters in HTTPs GET statement and passes them as variables to code within the application this could become a safety hazard since the application processes these variables in his operations.","If the application framework allows automatic mass parameter assignment (also called automatic variable binding) from the inbound request to a model, verify that security sensitive fields such as ''accountBalance'', ''role'' or ''password'' are protected from malicious automatic binding. Whenever your application takes parameters in HTTPs GET statement and passes them as variables to code within the application this could become a safety hazard since the application processes these variables in his operations."
Cryptographic function implementation,Whenever a cryptographic function is not implemented on the server side then these cryptographic functions could easily be bypassed by an attacker.,Whenever a cryptographic function is not implemented on the server side then these cryptographic functions could easily be bypassed by an attacker.
Cryptographic modules must fail securely,Whenever a cryptographic module does not fail securely this the device needs to be put in error state so it''s not useable anymore.,Whenever a cryptographic module does not fail securely this the device needs to be put in error state so it''s not useable anymore.
Access to any master secret must be protected from unauthorized access,Access to any master secret must be protected from unauthorized access in order to protect the integrity and the confidentiality of the data.,Access to any master secret must be protected from unauthorized access in order to protect the integrity and the confidentiality of the data.
Enforce policys for sensitive data processing,When you process data you should always enforce policies for the transfer of sensitive data in order to enforce a higher level of security imposing structured thresholds to fend off attackers.,When you process data you should always enforce policies for the transfer of sensitive data in order to enforce a higher level of security imposing structured thresholds to fend off attackers.
Access control pattern,For successful access control/login functionality there are a lot of things to take into consideration before you start developing this type of functionality.,For successful access control/login functionality there are a lot of things to take into consideration before you start developing this type of functionality.
Password forget pattern,Whenever you are implementing a forgot password function into your system there are a few things you need to take into consideration in order to prevent security flaws in your application.  1. Forget password functions 2. Denial of service by locking out accounts 3. Username enumeration 4. Does The application enforce the use of secure passwords 5. Disallow the use of old passwords,Whenever you are implementing a forgot password function into your system there are a few things you need to take into consideration in order to prevent security flaws in your application.  1. Forget password functions 2. Denial of service by locking out accounts 3. Username enumeration 4. Does The application enforce the use of secure passwords 5. Disallow the use of old passwords
Sessions pattern,"When working with sessions there are a couple of things you need to consider in order to implement them securely throughout your system. For more detailed information about these items you should check the knowledgebase about: 1. Session management control 2. Session cookies without the Secure flag 3. Session cookies without the HTTP Only flag 4. External session hijacking 5. Insecure transmission of session cookies 6. Session information is not stored server side 7. Session ids should be generated with sufficient entropy, the preferred method is the frameworks default session management control implementation is used by the application 8. User generated session ids should be rejected by the server 9. The logout functionality should revoke the complete session 10. The login functionality should always generate (and use) a new session id 11. Session IDs do not timeout.(idle) 12. Absolute session timed out 13. Verify that the session id is never disclosed 14. Session cookies (Domain)","When working with sessions there are a couple of things you need to consider in order to implement them securely throughout your system. For more detailed information about these items you should check the knowledgebase about: 1. Session management control 2. Session cookies without the Secure flag 3. Session cookies without the HTTP Only flag 4. External session hijacking 5. Insecure transmission of session cookies 6. Session information is not stored server side 7. Session ids should be generated with sufficient entropy, the preferred method is the frameworks default session management control implementation is used by the application 8. User generated session ids should be rejected by the server 9. The logout functionality should revoke the complete session 10. The login functionality should always generate (and use) a new session id 11. Session IDs do not timeout.(idle) 12. Absolute session timed out 13. Verify that the session id is never disclosed 14. Session cookies (Domain)"
Submit forms pattern,Whenever a user can submit a form in your system you should consider implementing the following defense mechanism in order to ensure highlevel security.  1.  Single user input validation controls and Audit logs 2.  CSRF tokens 3.  Principle of least privilege 4.  GET/POST requests,Whenever a user can submit a form in your system you should consider implementing the following defense mechanism in order to ensure highlevel security.  1.  Single user input validation controls and Audit logs 2.  CSRF tokens 3.  Principle of least privilege 4.  GET/POST requests
SQL injection Column truncation,"Whenever an applications structural logic mismatches with the database structural logic an attacker gains the opportunity to truncate his submit towards your database column by submitting a value longer than the limit allowed in the database. Imagine you have a system where users can register themselves.  The attacker can abuse this behavior of the database to overflow the length limit and truncate his submit and register himself as the admin, thus gaining its privileges.","Whenever an applications structural logic mismatches with the database structural logic an attacker gains the opportunity to truncate his submit towards your database column by submitting a value longer than the limit allowed in the database. Imagine you have a system where users can register themselves.  The attacker can abuse this behavior of the database to overflow the length limit and truncate his submit and register himself as the admin, thus gaining its privileges."
User registration pattern,"Whenever you allow users to register on your system there are a couple of things you need to take into consideration in order to enforce a high level of security For more detailed information about these items you should check the knowledgebase about:  1. Column Truncation SQL injection(for MySQL databases) 2. Single input validation controls 3. Audit logs 4. Prevent password leaking 5. Predictable password and or token generation 6. Are all passwords hashed, salted and stretched 7. Does the application enforce the use of secure passwords?","Whenever you allow users to register on your system there are a couple of things you need to take into consideration in order to enforce a high level of security For more detailed information about these items you should check the knowledgebase about:  1. Column Truncation SQL injection(for MySQL databases) 2. Single input validation controls 3. Audit logs 4. Prevent password leaking 5. Predictable password and or token generation 6. Are all passwords hashed, salted and stretched 7. Does the application enforce the use of secure passwords?"
Cross subdomain cookie attack,"A quick overview of how it works:  1. A website www.example.com hands out subdomains to untrusted third parties 2. One such party, Mallory, who now controls evil.example.com, lures Alice to her site 3. A visit to evil.example.com sets a session cookie with the domain .example.com on Alice''s browser 4. When Alice visits www.example.com, this cookie will be sent with the request, as the specs for cookies states, and Alice will have the session specified by Mallory''s cookie. 5. Mallory can now use Alice her account.","A quick overview of how it works:  1. A website www.example.com hands out subdomains to untrusted third parties 2. One such party, Mallory, who now controls evil.example.com, lures Alice to her site 3. A visit to evil.example.com sets a session cookie with the domain .example.com on Alice''s browser 4. When Alice visits www.example.com, this cookie will be sent with the request, as the specs for cookies states, and Alice will have the session specified by Mallory''s cookie. 5. Mallory can now use Alice her account."
HTML injections,Whenever an attacker can inject HTML in your application there is a variety of different attacks he could perform such as:  1. Content Spoofing 2. Image Tag Injection   3. Form Rerouting 4. Base Jumping 5. Element Override 6. Hanging Textarea  Even when your application intercepts XSS injections by means of a content security policy header it still remains vulnerable to the attacks summarized above.,Whenever an attacker can inject HTML in your application there is a variety of different attacks he could perform such as:  1. Content Spoofing 2. Image Tag Injection   3. Form Rerouting 4. Base Jumping 5. Element Override 6. Hanging Textarea  Even when your application intercepts XSS injections by means of a content security policy header it still remains vulnerable to the attacks summarized above.
RFD and file download injections,"Reflective file download occurs whenever an attacker can ""forge"" a download through misconfiguration in your ""disposition"" and ""content type"" headers. Instead of having the attacker to upload an evil file to the web server he can now force the browser to download a malicious file by abusing these headers and setting the file extension to any type he wants.  Now, whenever there is also userinput being reflected back into that download it can be used to forge evil attacks. The attacker can present an evil file to ignorant victim''s who are trusting the domain of which the download was presented from.  File download injection is a similar type of attack except this attack is made possible whenever there is userinput that is reflected into the ""filename="" parameter in the ""disposition"" header. The attacker again can force the browser to download a file with his own choice of extension and set the content of this file by injecting this directly into the response like filename=evil.bat%0A%0D%0A%0DinsertEvilStringHere  Whenever the user now opens the downloaded file the attacker can gain full control over the target’s device.","Reflective file download occurs whenever an attacker can ""forge"" a download through misconfiguration in your ""disposition"" and ""content type"" headers. Instead of having the attacker to upload an evil file to the web server he can now force the browser to download a malicious file by abusing these headers and setting the file extension to any type he wants.  Now, whenever there is also userinput being reflected back into that download it can be used to forge evil attacks. The attacker can present an evil file to ignorant victim''s who are trusting the domain of which the download was presented from.  File download injection is a similar type of attack except this attack is made possible whenever there is userinput that is reflected into the ""filename="" parameter in the ""disposition"" header. The attacker again can force the browser to download a file with his own choice of extension and set the content of this file by injecting this directly into the response like filename=evil.bat%0A%0D%0A%0DinsertEvilStringHere  Whenever the user now opens the downloaded file the attacker can gain full control over the target’s device."
Identify all application components,"When you are building an application you first want to map where you are placing source files, libraries and executables.  With these components identified and mapped, it becomes transparent where possible pitfalls might be in your application and increases the maintainability of the system. Also, you have an indicator where possible reinforcements have to be implemented to avoid attacks.(i.e places where your application contains executable''s)","When you are building an application you first want to map where you are placing source files, libraries and executables.  With these components identified and mapped, it becomes transparent where possible pitfalls might be in your application and increases the maintainability of the system. Also, you have an indicator where possible reinforcements have to be implemented to avoid attacks.(i.e places where your application contains executable''s)"
Identify external dependencies,Sometimes your application has certain external dependencies which may strongly influence your application''s operation. These external dependencies might become an attackers target since compromising that service might lead to a DoS of your system or influence the system in such a way it leaves room for other attacks.,Sometimes your application has certain external dependencies which may strongly influence your application''s operation. These external dependencies might become an attackers target since compromising that service might lead to a DoS of your system or influence the system in such a way it leaves room for other attacks.
High level architecture should be defined,"Whenever you are developing an application you want to map all the architecture it contains. Whenever there are breaches, updates, or other escalations it makes it easy and transparent for forensics, operators, and developers to do their job as fast as possible.","Whenever you are developing an application you want to map all the architecture it contains. Whenever there are breaches, updates, or other escalations it makes it easy and transparent for forensics, operators, and developers to do their job as fast as possible."
Threat modeling,"Threat modeling is a procedure for optimizing Network/ Application/ Internet Security by identifying objectives and vulnerabilities, and then defining countermeasures to prevent, or mitigate the effects of, threats to the system. A threat is a potential or actual undesirable event that may be malicious (such as DoS attack) or incidental (failure of a Storage Device). Threat modeling is a planned activity for identifying and assessing application threats and vulnerabilities.","Threat modeling is a procedure for optimizing Network/ Application/ Internet Security by identifying objectives and vulnerabilities, and then defining countermeasures to prevent, or mitigate the effects of, threats to the system. A threat is a potential or actual undesirable event that may be malicious (such as DoS attack) or incidental (failure of a Storage Device). Threat modeling is a planned activity for identifying and assessing application threats and vulnerabilities."
Differential analysis attack,"Whenever an attacker sends a request to the server, an example by means of authentication functionality. He can measure the average response time between a request containing a valid username and a request containing a invalid username. The attacker can now use this differential in response time to enumerate user accounts.","Whenever an attacker sends a request to the server, an example by means of authentication functionality. He can measure the average response time between a request containing a valid username and a request containing a invalid username. The attacker can now use this differential in response time to enumerate user accounts."
Client side input validation,"As web applications become more advanced, an increasing amount of HTML is generated by JavaScript on the clientside rather than by the server. Anytime content needs to be changed without refreshing the entire page, the update must be performed using JavaScript. Most notably, this is the case when a page is updated after an AJAX request.  XSS vulnerabilities can be present not only in your website''s serverside code, but also in your website''s clientside JavaScript code. Consequently, even with completely secure serverside code, the clientside code might still unsafely include user input in a DOM update after the page has loaded. If this happens, the clientside code has enabled an XSS attack through no fault of the serverside code.","As web applications become more advanced, an increasing amount of HTML is generated by JavaScript on the clientside rather than by the server. Anytime content needs to be changed without refreshing the entire page, the update must be performed using JavaScript. Most notably, this is the case when a page is updated after an AJAX request.  XSS vulnerabilities can be present not only in your website''s serverside code, but also in your website''s clientside JavaScript code. Consequently, even with completely secure serverside code, the clientside code might still unsafely include user input in a DOM update after the page has loaded. If this happens, the clientside code has enabled an XSS attack through no fault of the serverside code."
Positive validation model,"There are two popular methods for handling input validation. The first is blacklisting and the second one is the whitelisting method, also known as a positive validation model. The big disadvantage of the blacklisting model would be that an attacker has a great diversity into forging his attack strings and payloads which can make it hard for your application to detect all of them. It would be very time consuming importing them all into your system. Whenever you are using a positive validation model you are simply checking for the input you were expecting as defined in your application’s operation, for example:  Let''s say you have a form and were expecting it to return the value of a checkbox. This would be a fixed value, yes or no? Whenever the value diverges from the expected input in the applications operation you can assume there was an intercepting proxy tampering these values and act accordingly to it.  Same goes for whenever you were expecting just a string, integer, alphanumeric character or even special strings such as names as O’Reily. This method also makes your code clear, transparent and highly maintainable.","There are two popular methods for handling input validation. The first is blacklisting and the second one is the whitelisting method, also known as a positive validation model. The big disadvantage of the blacklisting model would be that an attacker has a great diversity into forging his attack strings and payloads which can make it hard for your application to detect all of them. It would be very time consuming importing them all into your system. Whenever you are using a positive validation model you are simply checking for the input you were expecting as defined in your application’s operation, for example:  Let''s say you have a form and were expecting it to return the value of a checkbox. This would be a fixed value, yes or no? Whenever the value diverges from the expected input in the applications operation you can assume there was an intercepting proxy tampering these values and act accordingly to it.  Same goes for whenever you were expecting just a string, integer, alphanumeric character or even special strings such as names as O’Reily. This method also makes your code clear, transparent and highly maintainable."
TLS certificate public key pinning,"Pinning is the process of associating a host with their expected X509 certificate or public key. Once a certificate or public key is known or seen for a host, the certificate or public key is associated or ''pinned'' to the host. If more than one certificate or public key is acceptable, then the program holds a pinset (taking from Jon Larimer and Kenny Root Google I/O talk). In this case, the advertised identity must match one of the elements in the pinset.","Pinning is the process of associating a host with their expected X509 certificate or public key. Once a certificate or public key is known or seen for a host, the certificate or public key is associated or ''pinned'' to the host. If more than one certificate or public key is acceptable, then the program holds a pinset (taking from Jon Larimer and Kenny Root Google I/O talk). In this case, the advertised identity must match one of the elements in the pinset."
HSTS preload,"HTTP StrictTransportSecurity (HSTS) allows sites to specify that they should be accessed via a secure connection only. The problem is, a user''s first request to a site employing HSTS may not be over HTTPS. A preload list will allow us to ship Firefox with some preset HSTS sites that, from the first time they''re accessed in the browser, will require a secure connection.","HTTP StrictTransportSecurity (HSTS) allows sites to specify that they should be accessed via a secure connection only. The problem is, a user''s first request to a site employing HSTS may not be over HTTPS. A preload list will allow us to ship Firefox with some preset HSTS sites that, from the first time they''re accessed in the browser, will require a secure connection."
Forward secrecy ciphers,"In cryptography, forward secrecy (FS; also known as perfect forward secrecy, or PFS) is a property of keyagreement protocols ensuring that a session key derived from a set of longterm keys cannot be compromised if one of the longterm keys is compromised in the future. The key used to protect the transmission of data must not be used to derive any additional keys, and if the key used to protect the transmission of data is derived from some other keying material, then that material must not be used to derive any more keys. In this way, compromise of a single key permits access only to data protected by that single key.","In cryptography, forward secrecy (FS; also known as perfect forward secrecy, or PFS) is a property of keyagreement protocols ensuring that a session key derived from a set of longterm keys cannot be compromised if one of the longterm keys is compromised in the future. The key used to protect the transmission of data must not be used to derive any additional keys, and if the key used to protect the transmission of data is derived from some other keying material, then that material must not be used to derive any more keys. In this way, compromise of a single key permits access only to data protected by that single key."
OCSP stapling,"OCSP stapling, formally known as the TLS Certificate Status Request extension, is an alternative approach to the Online Certificate Status Protocol (OCSP) for checking the revocation status of X.509 digital certificates. It allows the presenter of a certificate to bear the resource cost involved in providing OCSP responses by appending (""stapling"") a timestamped OCSP response signed by the CA to the initial TLS Handshake, eliminating the need for clients to contact the CA","OCSP stapling, formally known as the TLS Certificate Status Request extension, is an alternative approach to the Online Certificate Status Protocol (OCSP) for checking the revocation status of X.509 digital certificates. It allows the presenter of a certificate to bear the resource cost involved in providing OCSP responses by appending (""stapling"") a timestamped OCSP response signed by the CA to the initial TLS Handshake, eliminating the need for clients to contact the CA"
STRIDE,STRIDE is a collective for a series of vulnerabilities your applications should cover in order to harden your applications security.  STRIDE stands for: Spoofing Tampering Repudiation Information Disclosure Elevation of privilege,STRIDE is a collective for a series of vulnerabilities your applications should cover in order to harden your applications security.  STRIDE stands for: Spoofing Tampering Repudiation Information Disclosure Elevation of privilege
File inclusion attack,"The File Inclusion vulnerability allows an attacker to include a file, usually exploiting a ""dynamic file inclusion"" mechanisms implemented in the target application. The vulnerability occurs due to the use of usersupplied input without proper validation.  This can lead to something as outputting the contents of the file, but depending on the severity, it can also lead to:   Code execution on the web server  Code execution on the clientside such as JavaScript which can lead to other attacks   such as crosssite scripting (XSS)  Denial of Service (DoS)  Sensitive Information Disclosure  Local File Inclusion (also known as LFI) is the process of including files, that are already locally present on the server, through the exploiting of vulnerable inclusion procedures implemented in the application. This vulnerability occurs, for example, when a page receives, as input, the path to the file that has to be included and this input is not properly sanitized, allowing directory traversal characters (such as dotdotslash) to be injected. Although most examples point to vulnerable PHP scripts, we should keep in mind that it is also common in other technologies such as JSP, ASP and others.","The File Inclusion vulnerability allows an attacker to include a file, usually exploiting a ""dynamic file inclusion"" mechanisms implemented in the target application. The vulnerability occurs due to the use of usersupplied input without proper validation.  This can lead to something as outputting the contents of the file, but depending on the severity, it can also lead to:   Code execution on the web server  Code execution on the clientside such as JavaScript which can lead to other attacks   such as crosssite scripting (XSS)  Denial of Service (DoS)  Sensitive Information Disclosure  Local File Inclusion (also known as LFI) is the process of including files, that are already locally present on the server, through the exploiting of vulnerable inclusion procedures implemented in the application. This vulnerability occurs, for example, when a page receives, as input, the path to the file that has to be included and this input is not properly sanitized, allowing directory traversal characters (such as dotdotslash) to be injected. Although most examples point to vulnerable PHP scripts, we should keep in mind that it is also common in other technologies such as JSP, ASP and others."
Access management,Whenever your application contains administration and management functions you should put on restrictions for visiting these functionalities in order to reduce an attackers attack vector on your services since they are not directly accessible for them.,Whenever your application contains administration and management functions you should put on restrictions for visiting these functionalities in order to reduce an attackers attack vector on your services since they are not directly accessible for them.
XML schema (XSD),"When adding schema''s to your or XML files you have better control over what type of userinput can be supplied in your application. This dramatically decreases an attacker’s vector when implemented the right way. Nonetheless, you should always apply your own input validation and rejection as an extra layer of defense. This approach is also desirable since you also want to do countering and logging on the user’s requests and input.","When adding schema''s to your or XML files you have better control over what type of userinput can be supplied in your application. This dramatically decreases an attacker’s vector when implemented the right way. Nonetheless, you should always apply your own input validation and rejection as an extra layer of defense. This approach is also desirable since you also want to do countering and logging on the user’s requests and input."
Limiting user input size,Whenever there is userinput supplied into your application you also want to limit the size of the userinput to appropriate maximum lengths.,Whenever there is userinput supplied into your application you also want to limit the size of the userinput to appropriate maximum lengths.
Parsing data  exchange formats,"Whenever you are parsing data exchange formats such as XML, JSON, CSV, etc, you have to make sure that whenever these data files contain malicious code this will not be executed by your application. You should also not solely depend on your parser to do all the encoding and escaping for you since there could always be an edge case that does execute certain attacks.","Whenever you are parsing data exchange formats such as XML, JSON, CSV, etc, you have to make sure that whenever these data files contain malicious code this will not be executed by your application. You should also not solely depend on your parser to do all the encoding and escaping for you since there could always be an edge case that does execute certain attacks."
Content security policy headers,"The main use of the content security policy header is to, detect, report, and reject XSS attacks. The core issue in relation to XSS attacks is the browser''s inability to distinguish between a script that''s intended to be part of your application, and a script that''s been maliciously injected by a thirdparty. With the use of CSP(Content Security policy), we can tell the browser which script is safe to execute and which scripts are most likely been injected by an attacker.","The main use of the content security policy header is to, detect, report, and reject XSS attacks. The core issue in relation to XSS attacks is the browser''s inability to distinguish between a script that''s intended to be part of your application, and a script that''s been maliciously injected by a thirdparty. With the use of CSP(Content Security policy), we can tell the browser which script is safe to execute and which scripts are most likely been injected by an attacker."
Safe javascript jquery methods,"Whenever you are supplying your JavaScript/jquery with data which is controlled by the user, you should make sure this data is not supplied towards functions which could interpreted the supplied and parse input as code. This could lead to XSS and other code injections.","Whenever you are supplying your JavaScript/jquery with data which is controlled by the user, you should make sure this data is not supplied towards functions which could interpreted the supplied and parse input as code. This could lead to XSS and other code injections."
WYSIWYG editors,"WYSIWYG editors can be a great risk to your web application since it allows direct HTML as input to make the user perform styling on their submissions. This is why the editor should be put under a strict sanitation protocol to prevent injections.  The first thing to take into consideration whenever you want to use WYSIWYG editors on your web application is to use as limited options as possible. Only the options which are necessary for your applications intended operation should be applied. This decreases the attackers attack vector drastically and leaves less room for error in your WYSIWYG editor in terms of your HTML sanitation.  When providing your web application with an WYSIWYG editor you should also take note that most people just want to use bullets, make text bold or underline some text. They mostly do not understand half the functionalities the editors are providing.","WYSIWYG editors can be a great risk to your web application since it allows direct HTML as input to make the user perform styling on their submissions. This is why the editor should be put under a strict sanitation protocol to prevent injections.  The first thing to take into consideration whenever you want to use WYSIWYG editors on your web application is to use as limited options as possible. Only the options which are necessary for your applications intended operation should be applied. This decreases the attackers attack vector drastically and leaves less room for error in your WYSIWYG editor in terms of your HTML sanitation.  When providing your web application with an WYSIWYG editor you should also take note that most people just want to use bullets, make text bold or underline some text. They mostly do not understand half the functionalities the editors are providing."
Parsing JSON with Javascript,"The eval() function evaluates or executes an argument.  If the argument is an expression, eval() evaluates the expression. If the argument is one or more JavaScript statements, eval() executes the statements.  This is exactly the reason why eval() should NEVER be used to parse JSON or other formats of data which could possible contain malicious code.","The eval() function evaluates or executes an argument.  If the argument is an expression, eval() evaluates the expression. If the argument is one or more JavaScript statements, eval() executes the statements.  This is exactly the reason why eval() should NEVER be used to parse JSON or other formats of data which could possible contain malicious code."
Account lockout,All applications should contain the possibility to lock down accounts for whenever it detects attacks by/on users. Also you should include options for both soft and hard lockout mechanisms.,All applications should contain the possibility to lock down accounts for whenever it detects attacks by/on users. Also you should include options for both soft and hard lockout mechanisms.
XML attacks,"Whenever you are using XML in your application there are a few possibilities for injections depending on how you are applying XML in your system.  Extensible Markup Language (XML) is a markup language that defines a set of rules for encoding documents in a format which is both humanreadable and machinereadable. It is defined by the W3C''s XML 1.0 Specification and by several other related specifications, all of which are free open standards.","Whenever you are using XML in your application there are a few possibilities for injections depending on how you are applying XML in your system.  Extensible Markup Language (XML) is a markup language that defines a set of rules for encoding documents in a format which is both humanreadable and machinereadable. It is defined by the W3C''s XML 1.0 Specification and by several other related specifications, all of which are free open standards."
Centralized security controls,Whenever security controls do not have a centralized implementation there is a high probability for bugs or security issues being hidden into your application due to the loss of abstraction and duplication.,Whenever security controls do not have a centralized implementation there is a high probability for bugs or security issues being hidden into your application due to the loss of abstraction and duplication.
Data controller display layer separation,"The application should separate data, controller, and display layers in order to make your application more clear and understandable in terms of abstraction due to separation.  Whenever your application is more organized and abstracted it is much easier to implement less flawed security controls.","The application should separate data, controller, and display layers in order to make your application more clear and understandable in terms of abstraction due to separation.  Whenever your application is more organized and abstracted it is much easier to implement less flawed security controls."
Proven authentication mechanisms,"Whenever your application has the option for users to authenticate themselves your method should be ""proven"" and secure in the sense of that:  1. it should comply to some security standards/guidelines 2. Before implementing authentication on a live environment it has to be pentested/audited by    professionals.","Whenever your application has the option for users to authenticate themselves your method should be ""proven"" and secure in the sense of that:  1. it should comply to some security standards/guidelines 2. Before implementing authentication on a live environment it has to be pentested/audited by    professionals."
Administrative interfaces must not be accessible to untrusted parties,Whenever it is not necessary for administrative pages to be publicly accessible these pages should have restricted access for users. Whenever these pages are secluded from the rest of the application in terms of accessibility this could reduce the attack vector of malicious users.,Whenever it is not necessary for administrative pages to be publicly accessible these pages should have restricted access for users. Whenever these pages are secluded from the rest of the application in terms of accessibility this could reduce the attack vector of malicious users.
Concurrent session handling,You should keep track of all the different active concurrent sessions. Whenever the application discovers concurrent sessions it should always notify the user about this and should give him the opportunity to end the other sessions.  With this defense in place it becomes harder for attackers to hijack a users session since they will be notified about concurrent sessions.,You should keep track of all the different active concurrent sessions. Whenever the application discovers concurrent sessions it should always notify the user about this and should give him the opportunity to end the other sessions.  With this defense in place it becomes harder for attackers to hijack a users session since they will be notified about concurrent sessions.
Auto escaping technology,"Some frameworks/templates have the option to autoescape all incoming userinput to harmless encoded data in order to prevent attacks. However, this autoescaping functionality is also optional to be disabled. Whenever this autoescaping function has been disabled your application might be vulnerable to attacks like XSS.","Some frameworks/templates have the option to autoescape all incoming userinput to harmless encoded data in order to prevent attacks. However, this autoescaping functionality is also optional to be disabled. Whenever this autoescaping function has been disabled your application might be vulnerable to attacks like XSS."
Client side storage,"Client side storage also known as Offline Storage or Web Storage. The Underlying storage mechanism may vary from one user agent to the next. In other words, any authentication your application requires can be bypassed by a user with local privileges to the machine on which the data is stored. Therefore, it''s recommended not to store any sensitive information in local storage.","Client side storage also known as Offline Storage or Web Storage. The Underlying storage mechanism may vary from one user agent to the next. In other words, any authentication your application requires can be bypassed by a user with local privileges to the machine on which the data is stored. Therefore, it''s recommended not to store any sensitive information in local storage."
Log rotation and seperation,Log separation is indispensable in order to prevent it from either radically downgrading your application its performance or even causing a Denial of service because the server becomes unavailable due to the flooding of logs.,Log separation is indispensable in order to prevent it from either radically downgrading your application its performance or even causing a Denial of service because the server becomes unavailable due to the flooding of logs.
HTTP strict transport security,HTTP Strict Transport Security (HSTS) is an optin security enhancement that is specified by a web application through the use of a special response header. Once a supported browser receives this header that browser will prevent any communications from being sent over HTTP to the specified domain and will instead send all communications over HTTPS. It also prevents HTTPS click through prompts on browsers.   HSTS addresses the following threats:  1. User bookmarks or manually types http://example.com and is subject to a maninthemiddle attacker    HSTS automatically redirects HTTP requests to HTTPS for the target domain 2. Web application that is intended to be purely HTTPS inadvertently contains HTTP links or serves content over HTTP    HSTS automatically redirects HTTP requests to HTTPS for the target domain 3. A maninthemiddle attacker attempts to intercept traffic from a victim user using an invalid certificate and     hopes the user will accept the bad certificate 4. HSTS does not allow a user to override the invalid certificate message,HTTP Strict Transport Security (HSTS) is an optin security enhancement that is specified by a web application through the use of a special response header. Once a supported browser receives this header that browser will prevent any communications from being sent over HTTP to the specified domain and will instead send all communications over HTTPS. It also prevents HTTPS click through prompts on browsers.   HSTS addresses the following threats:  1. User bookmarks or manually types http://example.com and is subject to a maninthemiddle attacker    HSTS automatically redirects HTTP requests to HTTPS for the target domain 2. Web application that is intended to be purely HTTPS inadvertently contains HTTP links or serves content over HTTP    HSTS automatically redirects HTTP requests to HTTPS for the target domain 3. A maninthemiddle attacker attempts to intercept traffic from a victim user using an invalid certificate and     hopes the user will accept the bad certificate 4. HSTS does not allow a user to override the invalid certificate message
API responses security headers,"There are some security headers which should be properly configured in order to protect some API callbacks against Reflective File Download and other type of injections.  Also check if the API response is dynamic, if user input is reflected in the response. If so, you must validate and encode the input, in order to prevent XSS and Same origin method execution attacks.","There are some security headers which should be properly configured in order to protect some API callbacks against Reflective File Download and other type of injections.  Also check if the API response is dynamic, if user input is reflected in the response. If so, you must validate and encode the input, in order to prevent XSS and Same origin method execution attacks."
Do not support untrusted client side technologies,When using unsupported client side technologies which are not supported natively via W3C browser standards. Your application could be open to different types of attacks.,When using unsupported client side technologies which are not supported natively via W3C browser standards. Your application could be open to different types of attacks.
Signed message payloads WS security,"In order to establish trust between two communicating party''s such as servers and clients there message payload should be signed by means of public/private key method. This builds trust and makes it harder for attackers to impersonate different users.  Web Services Security (WSSecurity, WSS) is an extension to SOAP to apply security to  Web services. It is a member of the Web service specifications and was published by OASIS.  The protocol specifies how integrity and confidentiality can be enforced on messages and allows  the communication of various security token formats, such as Security Assertion Markup Language (SAML),  Kerberos, and X.509. Its main focus is the use of XML Signature and XML Encryption to provide endtoend security.","In order to establish trust between two communicating party''s such as servers and clients there message payload should be signed by means of public/private key method. This builds trust and makes it harder for attackers to impersonate different users.  Web Services Security (WSSecurity, WSS) is an extension to SOAP to apply security to  Web services. It is a member of the Web service specifications and was published by OASIS.  The protocol specifies how integrity and confidentiality can be enforced on messages and allows  the communication of various security token formats, such as Security Assertion Markup Language (SAML),  Kerberos, and X.509. Its main focus is the use of XML Signature and XML Encryption to provide endtoend security."
Hardware key vault,"Keys should remain in a protected key vault at all times. In particular, ensure that there is a gap between the threat vectors that have direct access to the data and the threat vectors that have direct access to the keys. This implies that keys should not be stored on the application or web server (assuming that application attackers are part of the relevant threat model).","Keys should remain in a protected key vault at all times. In particular, ensure that there is a gap between the threat vectors that have direct access to the data and the threat vectors that have direct access to the keys. This implies that keys should not be stored on the application or web server (assuming that application attackers are part of the relevant threat model)."
SOAP basic profile,Simple Soap Binding Profile is a specification from the Web Services Interoperability industry consortium. It is intended as a support profile for the WSI Basic Profile. This profile defines the way WSDL documents are to bind operations to a specific transport protocol SOAP.,Simple Soap Binding Profile is a specification from the Web Services Interoperability industry consortium. It is intended as a support profile for the WSI Basic Profile. This profile defines the way WSDL documents are to bind operations to a specific transport protocol SOAP.
Strong CRYPTO through CA hierachy,"When you have an offline PKI setup you need to have solid strong crypto layers. An attacker will look for weak chains in the hierarchy and abuse them when found. This can lead to ManInTheMiddle (MITM) attacks and impact the 3 security pillars C.I.A (Confidentiality, Integrity and Availability).","When you have an offline PKI setup you need to have solid strong crypto layers. An attacker will look for weak chains in the hierarchy and abuse them when found. This can lead to ManInTheMiddle (MITM) attacks and impact the 3 security pillars C.I.A (Confidentiality, Integrity and Availability)."
Build and deploy in a secure fashion,Using build platforms on premise or as a service is one of the core components in a SDLC. These build and deploy servers are sometimes not perfect for performing secure builds or deploys. This is because the lack of hardening of the OS for security improvements where the application could also benefit from this hardening. Also the access of third party services can lead to compromise of the secrets or integrity of the code of the application.,Using build platforms on premise or as a service is one of the core components in a SDLC. These build and deploy servers are sometimes not perfect for performing secure builds or deploys. This is because the lack of hardening of the OS for security improvements where the application could also benefit from this hardening. Also the access of third party services can lead to compromise of the secrets or integrity of the code of the application.
Signed application components,When an application don''t use signed components an attacker can easily modify parts of the application and load inject a backdoors. Also the attacker could modify business logic in the application without notice. Signed application components can help harden your application and make it noticeable when an attacker tries to modify the code.,When an application don''t use signed components an attacker can easily modify parts of the application and load inject a backdoors. Also the attacker could modify business logic in the application without notice. Signed application components can help harden your application and make it noticeable when an attacker tries to modify the code.
Build proccess security hardening,"Building an application should always be done on a server that you trust, you are in control of and has the latest security patches and hardening configured. In some applications you can use security techniques and modules that can protect your application from known security issues. Always use these techniques when they are available.","Building an application should always be done on a server that you trust, you are in control of and has the latest security patches and hardening configured. In some applications you can use security techniques and modules that can protect your application from known security issues. Always use these techniques when they are available."
Sanitize unstructured data,Verify that unstructured data is sanitized to enforce generic safety measures. When this is not setup an attacker can use this unstructured data to harm the application and perform injections.,Verify that unstructured data is sanitized to enforce generic safety measures. When this is not setup an attacker can use this unstructured data to harm the application and perform injections.
Zero keys and secrets before destroying them,Attackers are always on the lookout for secrets of a server or computer. When these secrets are accessible for an attacker because the key was not properly being destroyed then this can lead to security vulnerabilities. All secrets and keys should be completely erased from the memory since  an attacker could otherwise potentially retrieve these keys with memory dumping attacks on the application.,Attackers are always on the lookout for secrets of a server or computer. When these secrets are accessible for an attacker because the key was not properly being destroyed then this can lead to security vulnerabilities. All secrets and keys should be completely erased from the memory since  an attacker could otherwise potentially retrieve these keys with memory dumping attacks on the application.
Keys and passwords should be replaceable,It always can happen that you need the keys or the passwords of the application or in components that are needed by the application to work in a secure state. When these keys needs to be revoked because the password was leaked or an administrator leaving the company it''s always smart to have the possibility to revoke the keys or passwords without complications.,It always can happen that you need the keys or the passwords of the application or in components that are needed by the application to work in a secure state. When these keys needs to be revoked because the password was leaked or an administrator leaving the company it''s always smart to have the possibility to revoke the keys or passwords without complications.
Enforce random numbers are created with proper entropy at runtime,There are some techniques attackers use to decrease the entropy pool of the system so it will create weak and predictable ''random'' numbers that should not be used in crypto functions.,There are some techniques attackers use to decrease the entropy pool of the system so it will create weak and predictable ''random'' numbers that should not be used in crypto functions.
Segregated components,It''s always possible that an attacker can find a security flaw and abuse this to gain access to the server. From here the attacker tries to further infiltrate into the network and other important components of the application for example the database. This database should be firewalled correctly so it''s not accessible from the internet. Also this database has it own server and is in a different segment of the network. Always apply INGRESS and EGRESS filtering for all the servers used.,It''s always possible that an attacker can find a security flaw and abuse this to gain access to the server. From here the attacker tries to further infiltrate into the network and other important components of the application for example the database. This database should be firewalled correctly so it''s not accessible from the internet. Also this database has it own server and is in a different segment of the network. Always apply INGRESS and EGRESS filtering for all the servers used.
PII protection,"There should be extra care taken into account when you are dealing with    PII(personal identifiable information)   Fincancial data ( credit history, tax records, pay history, beneficiaries)  Health data (medical records, medical device details, or deanonymized research records)  There are multiple laws in countries that demand proper protection by means of SSL/TLS for when the data is in transit and encrypted with pub priv key system when stored on the disk. This is needed to protect the user from identity theft and fraud.","There should be extra care taken into account when you are dealing with    PII(personal identifiable information)   Fincancial data ( credit history, tax records, pay history, beneficiaries)  Health data (medical records, medical device details, or deanonymized research records)  There are multiple laws in countries that demand proper protection by means of SSL/TLS for when the data is in transit and encrypted with pub priv key system when stored on the disk. This is needed to protect the user from identity theft and fraud."
Verify application is not vulnerable for known security issues,"Whenever security researchers find a vulnerability in a library, modules, frameworks, platforms or  operating system, these vulnerabilities are reported and saved in the CVE list.   CVE is a list of information security vulnerabilities and exposures that aims to provide  common names for  publicly known cyber security issues. The goal of CVE is to make it easier  to share data  across separate vulnerability capabilities (tools, repositories, and services)  with this ""common enumeration.""  Attackers can use these lists to find publicly known exploits which might exists in the target application.  A lot of popular CVE exploits also have exploits available in Metasploit or the Exploit database. This enables script kiddies to easily exploit the target applications services, libraries and operating systems.","Whenever security researchers find a vulnerability in a library, modules, frameworks, platforms or  operating system, these vulnerabilities are reported and saved in the CVE list.   CVE is a list of information security vulnerabilities and exposures that aims to provide  common names for  publicly known cyber security issues. The goal of CVE is to make it easier  to share data  across separate vulnerability capabilities (tools, repositories, and services)  with this ""common enumeration.""  Attackers can use these lists to find publicly known exploits which might exists in the target application.  A lot of popular CVE exploits also have exploits available in Metasploit or the Exploit database. This enables script kiddies to easily exploit the target applications services, libraries and operating systems."
Disable autocomplete for all the input fields in forms,"Browser autocomplete and password managers could be used by attackers to steal sensitive information. Whenever an application is susceptible to XSS (Cross site scripting) attacks, the attacker can inject forms into the application which are autocompleted by the browser.  The attacker can then use JavaScript to read the input fields and steal credentials or other sensitive information.","Browser autocomplete and password managers could be used by attackers to steal sensitive information. Whenever an application is susceptible to XSS (Cross site scripting) attacks, the attacker can inject forms into the application which are autocompleted by the browser.  The attacker can then use JavaScript to read the input fields and steal credentials or other sensitive information."
All time sources should be synchronized,"All time sources must be synchronized throughout. For example, different API servers or  microservices. to prevent logs to be tainted and become unusable for forensics.","All time sources must be synchronized throughout. For example, different API servers or  microservices. to prevent logs to be tainted and become unusable for forensics."
Generate strong crypto tokens with at least 120 bit of effective entropy,"ID values stored on the device such as IMEI and UDID should not be used as authentication  tokens. These tokens are retrievable by other applications and thus warrant no integrity.   Using ID values from the mobile device also implies the use of static API tokens which is  considered insecure. These tokens cannot for example, expire or be invalidated by the application.   Whenever the application uses static tokens such as the ID values and this information is  leaked by a MiTM attack or leaked in another way then this attacker can now fully compromise  the user without being able to reject to expire or invalidate the static token EMEI or UDID for example.","ID values stored on the device such as IMEI and UDID should not be used as authentication  tokens. These tokens are retrievable by other applications and thus warrant no integrity.   Using ID values from the mobile device also implies the use of static API tokens which is  considered insecure. These tokens cannot for example, expire or be invalidated by the application.   Whenever the application uses static tokens such as the ID values and this information is  leaked by a MiTM attack or leaked in another way then this attacker can now fully compromise  the user without being able to reject to expire or invalidate the static token EMEI or UDID for example."
Enforce sensitive information to be stored encrypted on device,The mobile application should not store sensitive data into unencrypted shared resources on the device. These resources can be accessible by other applications or  physically accessible whenever a device gets lost or stolen.,The mobile application should not store sensitive data into unencrypted shared resources on the device. These resources can be accessible by other applications or  physically accessible whenever a device gets lost or stolen.
Encrypt sensitive information different depending on context,The mobile application should not leak sensitive information. This information could be leaked for example whenever:   Screenshots are saved in the current application as the primary  application is backgrounded   Sensitive information is written to the console of the mobile device  The Activitymanager should show the application name and a blank page and not show information,The mobile application should not leak sensitive information. This information could be leaked for example whenever:   Screenshots are saved in the current application as the primary  application is backgrounded   Sensitive information is written to the console of the mobile device  The Activitymanager should show the application name and a blank page and not show information
Principle of least privilege,"The application should always be request minimal permissions for required functionality and resources. This is also known as principle of least privilege. The principle of least privilege  recommends that accounts have the least amount of privilege required to perform their  business processes. This encompasses user rights, resource permissions such as CPU limits,  memory, network, and file system permissions.   Whenever the application is compromised by a potential attacker, the attacker does not gain more arbitrary control over the victim''s device","The application should always be request minimal permissions for required functionality and resources. This is also known as principle of least privilege. The principle of least privilege  recommends that accounts have the least amount of privilege required to perform their  business processes. This encompasses user rights, resource permissions such as CPU limits,  memory, network, and file system permissions.   Whenever the application is compromised by a potential attacker, the attacker does not gain more arbitrary control over the victim''s device"
Protecting device memory,When critical functionality is loaded into the device memory and always in the same place and location  then an attacker is able to create a very stable exploit for the application. This can lead to abuse  of the application business logic or stealing of sensitive information.,When critical functionality is loaded into the device memory and always in the same place and location  then an attacker is able to create a very stable exploit for the application. This can lead to abuse  of the application business logic or stealing of sensitive information.
Enforce anti debugging techniques,An attacker can use debug tooling to find out how the application is working and determain the  possible attack surface by using tooling like GDB or running the application in an emulator.  Using these type of tooling the attacker can learn a lot about the tool and succesfully attack the application and have a higher change of succeeding.,An attacker can use debug tooling to find out how the application is working and determain the  possible attack surface by using tooling like GDB or running the application in an emulator.  Using these type of tooling the attacker can learn a lot about the tool and succesfully attack the application and have a higher change of succeeding.
Protect sensitive activities intents or content providers,"The application should never export sensitive activities, intents, or content providers. These activities could than potentially be exploited by third party applications installed on the same device.","The application should never export sensitive activities, intents, or content providers. These activities could than potentially be exploited by third party applications installed on the same device."
Mitigate memory dumping attacks,"Whenever sensitive information in stored in the devices’ memory, this information can  be dumped by various tool such as “android debugger (ADB)“ on android devices. This  information could give critical information about the application and could aid attackers  in their attacks.","Whenever sensitive information in stored in the devices’ memory, this information can  be dumped by various tool such as “android debugger (ADB)“ on android devices. This  information could give critical information about the application and could aid attackers  in their attacks."
Protect agains exported activities or content providers,Whenever input from exported activities intents or content provided is not properly validated this input could potentially exploit vulnerabilities on the mobile application depending on the context in where the input is being used.,Whenever input from exported activities intents or content provided is not properly validated this input could potentially exploit vulnerabilities on the mobile application depending on the context in where the input is being used.
Block common password and weak passphrases,"Applications should encourage the use of strong passwords and passphrases. Preferably the password policy should not put limitations or restrictions on the chosen passwords. Whenever the application supports strong passwords and the use of password managers, the possibility for an attacker performing a succesfull bruteforce attack drops significally.  This also increases the possibility that the application can be used with users'' passwords managers.","Applications should encourage the use of strong passwords and passphrases. Preferably the password policy should not put limitations or restrictions on the chosen passwords. Whenever the application supports strong passwords and the use of password managers, the possibility for an attacker performing a succesfull bruteforce attack drops significally.  This also increases the possibility that the application can be used with users'' passwords managers."
Application assets hosted on secure location,Whenever application assets such as JavaScript libraries or CSS styleshees are not hosted on the application itself but on a external CDN which is not under your control these CDNs'' can introduce security vulnerabilities. Whenever one of these CDN gets compromised attackers can include malicious scripts. Also whenever one of these CDNs'' get out of service it could affect the operation of the application and even cause a denial of service.,Whenever application assets such as JavaScript libraries or CSS styleshees are not hosted on the application itself but on a external CDN which is not under your control these CDNs'' can introduce security vulnerabilities. Whenever one of these CDN gets compromised attackers can include malicious scripts. Also whenever one of these CDNs'' get out of service it could affect the operation of the application and even cause a denial of service.
CSRF on REST,"CrossSite Request Forgery (CSRF) is a type of attack that occurs when a malicious Web site, email, blog, instant message, or program causes a users Web browser to perform an unwanted action on a trusted site for which the user is currently authenticated.  The impact of a successful crosssite request forgery attack is limited to the capabilities exposed by the vulnerable application. For example, this attack could result in a transfer of funds, changing a password, or purchasing an item in the users context. In effect, CSRF attacks are used by an attacker to make a target system perform a function (funds Transfer, form submission etc.) via the targets browser without knowledge of the target user at least until the unauthorized function has been committed.","CrossSite Request Forgery (CSRF) is a type of attack that occurs when a malicious Web site, email, blog, instant message, or program causes a users Web browser to perform an unwanted action on a trusted site for which the user is currently authenticated.  The impact of a successful crosssite request forgery attack is limited to the capabilities exposed by the vulnerable application. For example, this attack could result in a transfer of funds, changing a password, or purchasing an item in the users context. In effect, CSRF attacks are used by an attacker to make a target system perform a function (funds Transfer, form submission etc.) via the targets browser without knowledge of the target user at least until the unauthorized function has been committed."
File IO commands,"I/O commands allow you to own, use, read from, write to, close devices and To direct I/O  operations to a device. Whenever user supplied input i.e file names and/or file data is being  directly used in these commands, this could lead to path traversal, local file include, file  mime type, and OS command injection vulnerabilities.","I/O commands allow you to own, use, read from, write to, close devices and To direct I/O  operations to a device. Whenever user supplied input i.e file names and/or file data is being  directly used in these commands, this could lead to path traversal, local file include, file  mime type, and OS command injection vulnerabilities."
File upload anti virus check,"whenever files from untrusted services are uploaded to the server, there should be additional checks in place to verify whether these files contain viruses (malware, trojans, ransomware).","whenever files from untrusted services are uploaded to the server, there should be additional checks in place to verify whether these files contain viruses (malware, trojans, ransomware)."
File upload outside document root,"Files that are uploaded by users or other untrusted services should always be placed outside of the document root. This is to prevent malicious files from being parsed by attackers such as PHP/HTML/Javascript files.  Should an attacker succeed to bypass file upload restrictions and upload a malicous file, it would be impossible for the attacker to parse these files since they are not located inside of the applications document root.","Files that are uploaded by users or other untrusted services should always be placed outside of the document root. This is to prevent malicious files from being parsed by attackers such as PHP/HTML/Javascript files.  Should an attacker succeed to bypass file upload restrictions and upload a malicous file, it would be impossible for the attacker to parse these files since they are not located inside of the applications document root."
Authentication integrety checks,"Whenever security logs can be modified by unauthorized users, potential attackers could use these privileges to erase and cover their attacks against the application or simply soil the log files.","Whenever security logs can be modified by unauthorized users, potential attackers could use these privileges to erase and cover their attacks against the application or simply soil the log files."
Unauthorized and unauthenticated access security logs,"Security logs should never allow unauthorized/unauthenticated access because these files include a lot of sensitive information and could assist an attacker in leveraging attacks. Whenever these logs can be accessed and modified, attackers could also erase their presence and attack trail they made to the application.","Security logs should never allow unauthorized/unauthenticated access because these files include a lot of sensitive information and could assist an attacker in leveraging attacks. Whenever these logs can be accessed and modified, attackers could also erase their presence and attack trail they made to the application."
Commonly chosen weak passwords and passphrases,Whenever an attacker has enumerated usernames from an application the attacker could start a bruteforce attack on the authentication functionality. Whenever users have common known weak passwords or passphrases there is a high probability that the attacker can compromise  some of the accounts on the application.,Whenever an attacker has enumerated usernames from an application the attacker could start a bruteforce attack on the authentication functionality. Whenever users have common known weak passwords or passphrases there is a high probability that the attacker can compromise  some of the accounts on the application.
Two factor authentication,"Two factor authenitcation must be implemented to protect your applications users against unauthorized use of the application.  Whenever the users username and password are leaked or disclosed by an application on what ever fashion possible, the  users account should still be proteced by two factor authentication mechanisms to prevent attackers from logging in with the credentials.","Two factor authenitcation must be implemented to protect your applications users against unauthorized use of the application.  Whenever the users username and password are leaked or disclosed by an application on what ever fashion possible, the  users account should still be proteced by two factor authentication mechanisms to prevent attackers from logging in with the credentials."
Logging access control decisions,Access control decisions must be logged for forensics in the case of brute force attacks.  The logs of the access controls can also help with keeping track of potential session hijacking attacks. Since it can be measured where users logged in from and how many concurrent sessions are active.,Access control decisions must be logged for forensics in the case of brute force attacks.  The logs of the access controls can also help with keeping track of potential session hijacking attacks. Since it can be measured where users logged in from and how many concurrent sessions are active.
High value transactions,"Whenever there are high value transactions a normal username/password static authentication method does not suffice to ensure a high level of security. Whenever the application digests high level of transactions ensure that risk based reauthentication, two factor or transaction signing is in place.","Whenever there are high value transactions a normal username/password static authentication method does not suffice to ensure a high level of security. Whenever the application digests high level of transactions ensure that risk based reauthentication, two factor or transaction signing is in place."
Verify that structured data is strongly typed and validated,Whenever structured data is strongly typed and validated against a defined schema the application can be developed as a defensible proactive application. The application can now measure everything that is outside of its intending operation by means of the defined schema''s and should be used to reject the input if the schema checks return false.,Whenever structured data is strongly typed and validated against a defined schema the application can be developed as a defensible proactive application. The application can now measure everything that is outside of its intending operation by means of the defined schema''s and should be used to reject the input if the schema checks return false.
Logging guidelines to access sensitive information,"Whenever sensitive data is accessed by a user this event should be logged to later verify the integrity of the access to the data. The same principle applies to whenever the data is collected and under which protection directives the data is accessed to.  Example: Imagine an insurance company and an accident has happened that is being showed on the news.  Workers of that insurance company must not be able to randomly fill in license plates  they see on the news to find PI about the people having the accident if it is not related to their jobs. I.E, an insurance holder calls the company to file in an accident report.","Whenever sensitive data is accessed by a user this event should be logged to later verify the integrity of the access to the data. The same principle applies to whenever the data is collected and under which protection directives the data is accessed to.  Example: Imagine an insurance company and an accident has happened that is being showed on the news.  Workers of that insurance company must not be able to randomly fill in license plates  they see on the news to find PI about the people having the accident if it is not related to their jobs. I.E, an insurance holder calls the company to file in an accident report."
Log injection,"Log injection problems are a subset of injection problem, in which invalid entries taken from user input are inserted in logs or audit trails, allowing an attacker to mislead administrators or cover traces of an attack. Log injection can also sometimes be used to attack log monitoring systems indirectly by injecting data that monitoring systems will misinterpret.","Log injection problems are a subset of injection problem, in which invalid entries taken from user input are inserted in logs or audit trails, allowing an attacker to mislead administrators or cover traces of an attack. Log injection can also sometimes be used to attack log monitoring systems indirectly by injecting data that monitoring systems will misinterpret."
Validate the integrity of all security relevant configurations,Only authorized administrators should have access to change securityrelevant configurations.  These administrators should also regularly check these configurations to be adequate and that they are not unchanged by malicious intent. This could keep systems vulnerable to attacks due to the disabling of important security systems.,Only authorized administrators should have access to change securityrelevant configurations.  These administrators should also regularly check these configurations to be adequate and that they are not unchanged by malicious intent. This could keep systems vulnerable to attacks due to the disabling of important security systems.
Trusted repositories,"Whenever the components are loaded from untrusted repositories this could imply the  components are backdoored, outdated and cannot be trusted.","Whenever the components are loaded from untrusted repositories this could imply the  components are backdoored, outdated and cannot be trusted."
Sandboxing malicious code,"Whenever constraints that are imposed on the client side are not enforced on the server side than these constraints can be easily bypassed by means of an intercepting proxy. i.e whenever user should not  be able to edit a form by solely disabling the input fields, a potential attacker can edit these input  fields on the client side as editable and still submit the form.  The same principle goes for whenever certain parts of the application should be inaccessible. Simply hiding the pages from the presentation layer is insecure since the attacker can enumerate by brute forcing or fuzzing himself into different pages. Again the access controls should be enforced also on the server side.","Whenever constraints that are imposed on the client side are not enforced on the server side than these constraints can be easily bypassed by means of an intercepting proxy. i.e whenever user should not  be able to edit a form by solely disabling the input fields, a potential attacker can edit these input  fields on the client side as editable and still submit the form.  The same principle goes for whenever certain parts of the application should be inaccessible. Simply hiding the pages from the presentation layer is insecure since the attacker can enumerate by brute forcing or fuzzing himself into different pages. Again the access controls should be enforced also on the server side."
Context sensitive authorization,"Whenever granting users different types of authorization throughout the application the authorization grants should be granted and enforced outside of the attackers scope.  i.e whenever a user gets his authorization grants through a cookie that says,  ````     auth=admin or auth=user ````  These authorization grants are easily manipulable.","Whenever granting users different types of authorization throughout the application the authorization grants should be granted and enforced outside of the attackers scope.  i.e whenever a user gets his authorization grants through a cookie that says,  ````     auth=admin or auth=user ````  These authorization grants are easily manipulable."
All access controls must fail securely,"Handling errors securely is a key aspect of secure coding. There are two types of errors that deserve special attention. The first is exceptions that occur in the processing of a security control itself. It''s important that these exceptions do not enable behavior that the countermeasure would normally not allow. As a developer, you should consider that there are generally three possible outcomes from a security mechanism:  1. allow the operation 2. disallow the operation 3. exception  In general, you should design your security mechanism so that a failure will follow the same execution path as disabling the operation","Handling errors securely is a key aspect of secure coding. There are two types of errors that deserve special attention. The first is exceptions that occur in the processing of a security control itself. It''s important that these exceptions do not enable behavior that the countermeasure would normally not allow. As a developer, you should consider that there are generally three possible outcomes from a security mechanism:  1. allow the operation 2. disallow the operation 3. exception  In general, you should design your security mechanism so that a failure will follow the same execution path as disabling the operation"
Password leakage,"After completing a password recovery functionality, the user should not be sent a plaintext password to his email adress. The application should also under no circumstances disclose the old or current password to the users.","After completing a password recovery functionality, the user should not be sent a plaintext password to his email adress. The application should also under no circumstances disclose the old or current password to the users."
TLS implementation,Whenever sensitive information is being sent over the application TLS must be applied in the application to prevent malicious attackers eavesdropping the network can look into and manipulate this sensitive information.,Whenever sensitive information is being sent over the application TLS must be applied in the application to prevent malicious attackers eavesdropping the network can look into and manipulate this sensitive information.
Screen scraping data harvest,"Whenever the application does not put a threshold on the number requests made to the server, screen scraping and data harvesting tools can gather data and information.  i.e should the application contain an insecure direct object reference, then the data harvesting tool could now harvest information it was not originally authorized to access to.  Or the application is a web shop and the competition is scraping prices and products in order to  give them an edge on comparison websites and get more business.","Whenever the application does not put a threshold on the number requests made to the server, screen scraping and data harvesting tools can gather data and information.  i.e should the application contain an insecure direct object reference, then the data harvesting tool could now harvest information it was not originally authorized to access to.  Or the application is a web shop and the competition is scraping prices and products in order to  give them an edge on comparison websites and get more business."
Communication between components (low privileges),"If accounts for communicating between components have granted more privileges than necessary, these accounts could impose a great threat whenever one of these components gets compromised by attackers.   i.e: A web application running on root privileges which has a path traversal vulnerability can be used to read both the ""etc/passwd"" file as well as reading the ""etc/shadow"" file.  These files can then be used in an offline password cracking attacks to recover accounts on the server.","If accounts for communicating between components have granted more privileges than necessary, these accounts could impose a great threat whenever one of these components gets compromised by attackers.   i.e: A web application running on root privileges which has a path traversal vulnerability can be used to read both the ""etc/passwd"" file as well as reading the ""etc/shadow"" file.  These files can then be used in an offline password cracking attacks to recover accounts on the server."
TLS settings are in line with current leading practice,"TLS settings must always be in line with current leading practice. Whenever TLS settings and ciphers get outdated, the TLS connection can be degraded/broken and used by attackers to eavesdrop on users traffic over the application.","TLS settings must always be in line with current leading practice. Whenever TLS settings and ciphers get outdated, the TLS connection can be degraded/broken and used by attackers to eavesdrop on users traffic over the application."
Data retention policy,"For all the data gathered in an application, there should be set up a data retention policy to make sure all the data is removed from the application when it is no longer used. This reduces the damage done by potential attackers when they get access to the applications data due to a breach.","For all the data gathered in an application, there should be set up a data retention policy to make sure all the data is removed from the application when it is no longer used. This reduces the damage done by potential attackers when they get access to the applications data due to a breach."
Authenticated data cleared from client storage,"Handling errors securely is a key aspect of secure coding. There are two types of errors that deserve special attention. The first is exceptions that occur in the processing of a security control itself. It''s important that these exceptions do not enable behavior that the countermeasure would normally not allow. As a developer, you should consider that there are generally three possible outcomes from a security mechanism:  1. Allow the operation 2. Disallow the operation 3. Exception  In general, you should design your security mechanism so that a failure will follow the same execution path as disabling the operation","Handling errors securely is a key aspect of secure coding. There are two types of errors that deserve special attention. The first is exceptions that occur in the processing of a security control itself. It''s important that these exceptions do not enable behavior that the countermeasure would normally not allow. As a developer, you should consider that there are generally three possible outcomes from a security mechanism:  1. Allow the operation 2. Disallow the operation 3. Exception  In general, you should design your security mechanism so that a failure will follow the same execution path as disabling the operation"
Sensitive information in code or online repositories,Components are defined in terms of the business functions and/or security functions they provide. It is easier for forensics to do their investigations whenever a breach has happened on an application.  These insights also help whenever an update or release is made on the application to determine what security risks are effectively covered by the security functions.,Components are defined in terms of the business functions and/or security functions they provide. It is easier for forensics to do their investigations whenever a breach has happened on an application.  These insights also help whenever an update or release is made on the application to determine what security risks are effectively covered by the security functions.
Display concurrent and active sessions,"Whenever the user is presented a summary of all concurrent sessions, this decreases a potentially succesful hijacking attack since the user can now see all sessions and terminate one whenever it does not feel trusted.","Whenever the user is presented a summary of all concurrent sessions, this decreases a potentially succesful hijacking attack since the user can now see all sessions and terminate one whenever it does not feel trusted."
Password change leads to destroying concurrent sessions,"Whenever a user changes his password, the user should be granted the option to kill all other concurrent sessions. This countermessure helps to exclude potential attackers living on a hijacked session.  Note: Whenever users are granted the possibility to change their passwords,       do not forget to make them reauthenticate or to use a form of step up       or adaptive authentication mechanism.","Whenever a user changes his password, the user should be granted the option to kill all other concurrent sessions. This countermessure helps to exclude potential attackers living on a hijacked session.  Note: Whenever users are granted the possibility to change their passwords,       do not forget to make them reauthenticate or to use a form of step up       or adaptive authentication mechanism."
HSTS preload,"HTTP Strict Transport Security (HSTS) is an optin security enhancement that is specified by a  web application through the use of a special response header. Once a supported browser receives  this header that browser will prevent any communications from being sent over HTTP to the specified  domain and will instead send all communications over HTTPS. It also prevents HTTPS click through prompts on browsers.  However, there is still a window where a user who has a fresh install, or who wipes out their local state, is vulnerable. This is due to the fact that the browser is not yet aware of the fact if the application is trying to connect to supports HSTS. Whenever you are added to the preload list, the application its preference is hardcoded into the browser and all first initial connections will always be made by HTTPS.","HTTP Strict Transport Security (HSTS) is an optin security enhancement that is specified by a  web application through the use of a special response header. Once a supported browser receives  this header that browser will prevent any communications from being sent over HTTP to the specified  domain and will instead send all communications over HTTPS. It also prevents HTTPS click through prompts on browsers.  However, there is still a window where a user who has a fresh install, or who wipes out their local state, is vulnerable. This is due to the fact that the browser is not yet aware of the fact if the application is trying to connect to supports HSTS. Whenever you are added to the preload list, the application its preference is hardcoded into the browser and all first initial connections will always be made by HTTPS."
Integrity check and authorised modification,"The Current state of the data or program should be compared to the previous recorded in order to detect changes. Throughout the development of the application, there must be perpetual checks in place to check if all  pages and resources by default require authentication except those specifically intended to be public. Sometimes developers simply forget to implement these checks, or they remove the checks temporarily  for testing purposes.","The Current state of the data or program should be compared to the previous recorded in order to detect changes. Throughout the development of the application, there must be perpetual checks in place to check if all  pages and resources by default require authentication except those specifically intended to be public. Sometimes developers simply forget to implement these checks, or they remove the checks temporarily  for testing purposes."
Unauthorised access and modification,"Throughout the development of the application there must be perpetual checks in place to check if all pages and resources by default require authentication except those specifically intended to be public.  Sometimes developers simply forget to implement these checks, or they remove the checks  temporarily for testing purposes.","Throughout the development of the application there must be perpetual checks in place to check if all pages and resources by default require authentication except those specifically intended to be public.  Sometimes developers simply forget to implement these checks, or they remove the checks  temporarily for testing purposes."
Identify and use only require functions if using components,"Applications have many different components that are needed for the business functions  or for the security functions they provide. With many different components, there are also possible vulnerabilities that can arise. Also, most of the components functions  that are delivered are not necessary needed and can introduce a vulnerability in a specific part that may not be even used by the application. Also, these security issues in the components  are publicly well know and documented.","Applications have many different components that are needed for the business functions  or for the security functions they provide. With many different components, there are also possible vulnerabilities that can arise. Also, most of the components functions  that are delivered are not necessary needed and can introduce a vulnerability in a specific part that may not be even used by the application. Also, these security issues in the components  are publicly well know and documented."
Centralized the mechanisms for protecting resources and the access,"All third party components the application depends on to operate must be mapped in terms of the functions, and/or security functions, they provide for several reasons.  1. Whenever one of these dependencies is down the application has to handle the missing of    that dependency gracefully and not break down resulting in a DOS.  2. All security functions they provide must be mapped and backed up by a WAF or ModSecurity in case    the dependency goes down for service.","All third party components the application depends on to operate must be mapped in terms of the functions, and/or security functions, they provide for several reasons.  1. Whenever one of these dependencies is down the application has to handle the missing of    that dependency gracefully and not break down resulting in a DOS.  2. All security functions they provide must be mapped and backed up by a WAF or ModSecurity in case    the dependency goes down for service."
Policy for processing sensitive data,"Server Side Request Forgery (SSRF) attack, where an attacker abuse the functionality of a vulnerable web application to send crafter request which which read or update internal  resources. Attacker can attack an internal network or application behind the firewall with this attack which is normally not accessible through external network and even attack the internal network web applications.  SSRF attack can be used to make requests to other internal resources for accessing the  metadata and to run a port can on the internal network. URL schema such as file:// can be used to read the file from the server. Attackers can use legacy URL schemas such as  dict, gopher, expect etc which can even cause remote code execution.","Server Side Request Forgery (SSRF) attack, where an attacker abuse the functionality of a vulnerable web application to send crafter request which which read or update internal  resources. Attacker can attack an internal network or application behind the firewall with this attack which is normally not accessible through external network and even attack the internal network web applications.  SSRF attack can be used to make requests to other internal resources for accessing the  metadata and to run a port can on the internal network. URL schema such as file:// can be used to read the file from the server. Attackers can use legacy URL schemas such as  dict, gopher, expect etc which can even cause remote code execution."
ASVS,"The OWASP Application Security Verification Standard (ASVS) Project provides a basis for testing web application technical security controls and also provides developers with a list of requirements for secure development.  The primary aim of the OWASP Application Security Verification Standard (ASVS) Project is to normalize the range in the coverage and level of rigor available in the market when it comes to performing Web application security verification using a commerciallyworkable open standard. The standard provides a basis for testing application technical security controls, as well as any technical security controls in the environment, that are relied on to protect against vulnerabilities such as CrossSite Scripting (XSS) and SQL injection. This standard can be used to establish a level of confidence in the security of Web applications. The requirements were developed with the following objectives in mind:  Use as a metric  Provide application developers and application owners with a yardstick with which to assess the degree of trust that can be placed in their Web applications, Use as guidance  Provide guidance to security control developers as to what to build into security controls in order to satisfy application security requirements, and Use during procurement  Provide a basis for specifying application security verification requirements in contracts.","The OWASP Application Security Verification Standard (ASVS) Project provides a basis for testing web application technical security controls and also provides developers with a list of requirements for secure development.  The primary aim of the OWASP Application Security Verification Standard (ASVS) Project is to normalize the range in the coverage and level of rigor available in the market when it comes to performing Web application security verification using a commerciallyworkable open standard. The standard provides a basis for testing application technical security controls, as well as any technical security controls in the environment, that are relied on to protect against vulnerabilities such as CrossSite Scripting (XSS) and SQL injection. This standard can be used to establish a level of confidence in the security of Web applications. The requirements were developed with the following objectives in mind:  Use as a metric  Provide application developers and application owners with a yardstick with which to assess the degree of trust that can be placed in their Web applications, Use as guidance  Provide guidance to security control developers as to what to build into security controls in order to satisfy application security requirements, and Use during procurement  Provide a basis for specifying application security verification requirements in contracts."
MASVS,"The OWASP Mobile App Security and Verification (MASVS) Project provides a basis for testing mobile application technical security controls and also provides developers with a list of requirements for secure development. It can be used by mobile software architects and developers seeking to develop secure mobile applications, as well as security testers to ensure completeness and consistency of test results.   The requirements were developed with the following objectives in mind:  Use as a metric  Provide developers and application owners with a yardstick with which to assess the degree of trust that can be placed in their mobile applications, Use as guidance  Provide guidance to security control developers as to what to build into security controls in order to satisfy application security requirements, and Use during procurement  Provide a basis for specifying application security verification requirements in contracts.","The OWASP Mobile App Security and Verification (MASVS) Project provides a basis for testing mobile application technical security controls and also provides developers with a list of requirements for secure development. It can be used by mobile software architects and developers seeking to develop secure mobile applications, as well as security testers to ensure completeness and consistency of test results.   The requirements were developed with the following objectives in mind:  Use as a metric  Provide developers and application owners with a yardstick with which to assess the degree of trust that can be placed in their mobile applications, Use as guidance  Provide guidance to security control developers as to what to build into security controls in order to satisfy application security requirements, and Use during procurement  Provide a basis for specifying application security verification requirements in contracts."
PCI DSS,"The Payment Card Industry Data Security Standard (PCI DSS) applies to companies of any size that accept credit card payments. If your company intends to accept card payment, and store, process and transmit cardholder data, you need to host your data securely with a PCI compliant hosting provider. PCI DSS 12 requirements is a set of security controls that businesses are required to implement to protect credit card data and comply with the Payment Card Industry Data Security Standard (PCI DSS). The requirements were developed and are maintained by the Payment Card Industry (PCI) Security Standards Council.","The Payment Card Industry Data Security Standard (PCI DSS) applies to companies of any size that accept credit card payments. If your company intends to accept card payment, and store, process and transmit cardholder data, you need to host your data securely with a PCI compliant hosting provider. PCI DSS 12 requirements is a set of security controls that businesses are required to implement to protect credit card data and comply with the Payment Card Industry Data Security Standard (PCI DSS). The requirements were developed and are maintained by the Payment Card Industry (PCI) Security Standards Council."
Tabnabbing,"Reverse tabnabbing is an attack where a page linked from the target page is able to rewrite that page,  for example to replace it with a phishing site. As the user was originally on the correct page they are  less likely to notice that it has been changed to a phishing site, especially it the site looks the same as the target.  If the user authenticates to this new page then their credentials (or other sensitive data) are sent to the phishing site  rather than the legitimate one.  As well as the target site being able to overwrite the target page, any http link can be spoofed to overwrite the target  page if the user is on an unsecured network, for example a public wifi hotspot. The attack is possible even if the target  site is only available via https as the attacker only needs to spoof the http site that is being linked to.","Reverse tabnabbing is an attack where a page linked from the target page is able to rewrite that page,  for example to replace it with a phishing site. As the user was originally on the correct page they are  less likely to notice that it has been changed to a phishing site, especially it the site looks the same as the target.  If the user authenticates to this new page then their credentials (or other sensitive data) are sent to the phishing site  rather than the legitimate one.  As well as the target site being able to overwrite the target page, any http link can be spoofed to overwrite the target  page if the user is on an unsecured network, for example a public wifi hotspot. The attack is possible even if the target  site is only available via https as the attacker only needs to spoof the http site that is being linked to."
Insecure direct object references,"Applications frequently use the actual name or key of an object when generating web pages.  Applications don’t always verify the user is authorized for the target object.  This results in an insecure direct object reference flaw. Testers can easily manipulate parameter  values to detect such flaws and code analysis quickly shows whether authorization is properly verified.  The most classic example: The application uses unverified data in a SQL call that is accessing account information:  String query = ""SELECT * FROM accts WHERE account = ?""; PreparedStatement pstmt = connection.prepareStatement(query , ... ); pstmt.setString( 1, request.getParameter(""acct"")); ResultSet results = pstmt.executeQuery();  The attacker simply modifies the ‘acct’ parameter in their browser to send whatever  account number they want. If not verified, the attacker can access any user’s account, instead of  only the intended customer’s account.  http://example.com/app/accountInfo?acct=notmyacct","Applications frequently use the actual name or key of an object when generating web pages.  Applications don’t always verify the user is authorized for the target object.  This results in an insecure direct object reference flaw. Testers can easily manipulate parameter  values to detect such flaws and code analysis quickly shows whether authorization is properly verified.  The most classic example: The application uses unverified data in a SQL call that is accessing account information:  String query = ""SELECT * FROM accts WHERE account = ?""; PreparedStatement pstmt = connection.prepareStatement(query , ... ); pstmt.setString( 1, request.getParameter(""acct"")); ResultSet results = pstmt.executeQuery();  The attacker simply modifies the ‘acct’ parameter in their browser to send whatever  account number they want. If not verified, the attacker can access any user’s account, instead of  only the intended customer’s account.  http://example.com/app/accountInfo?acct=notmyacct"
SMTP IMAP injection,"This threat affects all applications that communicate with mail servers (IMAP/SMTP), generally webmail  applications. The aim of this test is to verify the capacity to inject arbitrary IMAP/SMTP commands into the mail servers, due to input data not being properly sanitized.  The IMAP/SMTP Injection technique is more effective if the mail server is not directly accessible from Internet. Where full communication with the backend mail server is possible, it is recommended to conduct direct testing.  An IMAP/SMTP Injection makes it possible to access a mail server which otherwise would not be directly accessible from the Internet. In some cases, these internal systems do not have the same level of infrastructure security and hardening that is applied to the frontend web servers. Therefore, mail server results may be more vulnerable to attacks by end users","This threat affects all applications that communicate with mail servers (IMAP/SMTP), generally webmail  applications. The aim of this test is to verify the capacity to inject arbitrary IMAP/SMTP commands into the mail servers, due to input data not being properly sanitized.  The IMAP/SMTP Injection technique is more effective if the mail server is not directly accessible from Internet. Where full communication with the backend mail server is possible, it is recommended to conduct direct testing.  An IMAP/SMTP Injection makes it possible to access a mail server which otherwise would not be directly accessible from the Internet. In some cases, these internal systems do not have the same level of infrastructure security and hardening that is applied to the frontend web servers. Therefore, mail server results may be more vulnerable to attacks by end users"
Insecure object deserialization,"Serialization is the process of turning some object into a data format that can be restored later.  People often serialize objects in order to save them to storage, or to send as part of communications.  Deserialization is the reverse of that process, taking data structured from some format, and rebuilding it into an object. Today, the most popular data format for serializing data is JSON. Before that, it was XML.  However, many programming languages offer a native capability for serializing objects. These native formats usually offer more features than JSON or XML, including customizability of the serialization process.  Unfortunately, the features of these native deserialization mechanisms can be repurposed for malicious effect when operating on untrusted data. Attacks against deserializers have been found to allow denialofservice, access control, and remote code execution (RCE) attacks.","Serialization is the process of turning some object into a data format that can be restored later.  People often serialize objects in order to save them to storage, or to send as part of communications.  Deserialization is the reverse of that process, taking data structured from some format, and rebuilding it into an object. Today, the most popular data format for serializing data is JSON. Before that, it was XML.  However, many programming languages offer a native capability for serializing objects. These native formats usually offer more features than JSON or XML, including customizability of the serialization process.  Unfortunately, the features of these native deserialization mechanisms can be repurposed for malicious effect when operating on untrusted data. Attacks against deserializers have been found to allow denialofservice, access control, and remote code execution (RCE) attacks."
Software security development lifecycle,"In software engineering, a software development process is the process of dividing software development work into distinct phases to improve design, product management, and project management.  It is also known as a software development life cycle. The methodology may include the  predefinition of specific deliverables and artifacts that are created and completed by a  project team to develop or maintain an application  In this software security development lifecycle we can also integrate security test automation and other quality pilars for security.","In software engineering, a software development process is the process of dividing software development work into distinct phases to improve design, product management, and project management.  It is also known as a software development life cycle. The methodology may include the  predefinition of specific deliverables and artifacts that are created and completed by a  project team to develop or maintain an application  In this software security development lifecycle we can also integrate security test automation and other quality pilars for security."
Functional security constraints,"Access Control (or Authorization) is the process of granting or denying specific requests from a user,  program, or process. Access control also involves the act of granting and revoking those privileges.  It should be noted that authorization (verifying access to specific features or resources) is not equivalent to authentication (verifying identity).","Access Control (or Authorization) is the process of granting or denying specific requests from a user,  program, or process. Access control also involves the act of granting and revoking those privileges.  It should be noted that authorization (verifying access to specific features or resources) is not equivalent to authentication (verifying identity)."
Key management and key lifecycle by NIST,"This knowledgebase item refers to the NIST standard for key managment and key lifecycle.  This Recommendation provides cryptographic key management guidance. It consists of three parts. Part 1 provides general guidance and best practices for the management of cryptographic keying material. Part 2 provides guidance on policy and security planning requirements for U.S. government agencies. Finally, Part 3 provides guidance when using the cryptographic features of current systems.","This knowledgebase item refers to the NIST standard for key managment and key lifecycle.  This Recommendation provides cryptographic key management guidance. It consists of three parts. Part 1 provides general guidance and best practices for the management of cryptographic keying material. Part 2 provides guidance on policy and security planning requirements for U.S. government agencies. Finally, Part 3 provides guidance when using the cryptographic features of current systems."
Key vault,"Keys should remain in a protected key vault at all times.  In particular, ensure that there is a gap between the threat vectors  that have direct access to the data and the threat vectors that have direct access to the keys.  This implies that keys should not be stored on the application or web server  (assuming that application attackers are part of the relevant threat model).  A key vault helps secure, store and tightly control access to tokens, passwords, certificates and, encryption keys for protecting secrets and other sensitive data.    Imagine the use of a keyvault in the following scenario''s  * Running a docker container and provisioning it with secrets over CLI * Checking in API keys in your source repositories * Encrypting sensitive data at rest  Vault provides encryption as a service with centralized key management to simplify encrypting data  in transit and at rest across clouds and datacenters.  a Vault can be used to encrypt/decrypt data that is stored elsewhere. The primary use of this is to allow applications to encrypt their data while still storing it in the primary data store.  The benefit of this is that developers do not need to worry about how to properly encrypt data. The responsibility of encryption is on Vault and the security team managing it, and developers just encrypt/decrypt data as needed.","Keys should remain in a protected key vault at all times.  In particular, ensure that there is a gap between the threat vectors  that have direct access to the data and the threat vectors that have direct access to the keys.  This implies that keys should not be stored on the application or web server  (assuming that application attackers are part of the relevant threat model).  A key vault helps secure, store and tightly control access to tokens, passwords, certificates and, encryption keys for protecting secrets and other sensitive data.    Imagine the use of a keyvault in the following scenario''s  * Running a docker container and provisioning it with secrets over CLI * Checking in API keys in your source repositories * Encrypting sensitive data at rest  Vault provides encryption as a service with centralized key management to simplify encrypting data  in transit and at rest across clouds and datacenters.  a Vault can be used to encrypt/decrypt data that is stored elsewhere. The primary use of this is to allow applications to encrypt their data while still storing it in the primary data store.  The benefit of this is that developers do not need to worry about how to properly encrypt data. The responsibility of encryption is on Vault and the security team managing it, and developers just encrypt/decrypt data as needed."
Secrets shared with the client,"The CIA triad of confidentiality, integrity, and availability is at the heart of information security.  Confidentiality In information security, confidentiality ""is the property, that information is not made available or disclosed to unauthorized individuals, entities, or processes.""  While similar to ""privacy,"" the two words aren''t interchangeable. Rather, confidentiality  is a component of privacy that implements to protect our data from unauthorized viewers. Examples of confidentiality of electronic data being compromised include laptop theft,  password theft, or sensitive emails being sent to the incorrect individuals.  Integrity In information security, data integrity means maintaining and assuring the accuracy and completeness of data over its entire lifecycle. This means that data cannot be modified in an unauthorized or undetected manner. This is not the same thing as referential integrity in databases, although it can be viewed as a special case of consistency as understood in the classic ACID model of transaction processing. Information security systems typically provide message integrity along side to confidentiality.  Availability For any information system to serve its purpose, the information must be available when it is needed. This means the computing systems used to store and process the information,  the security controls used to protect it, and the communication channels used to access it must be functioning correctly. High availability systems aim to remain available at all times, preventing service disruptions due to power outages, hardware failures,  and system upgrades. Ensuring availability also involves preventing denialofservice attacks,  such as a flood of incoming messages to the target system, essentially forcing it to shut down.","The CIA triad of confidentiality, integrity, and availability is at the heart of information security.  Confidentiality In information security, confidentiality ""is the property, that information is not made available or disclosed to unauthorized individuals, entities, or processes.""  While similar to ""privacy,"" the two words aren''t interchangeable. Rather, confidentiality  is a component of privacy that implements to protect our data from unauthorized viewers. Examples of confidentiality of electronic data being compromised include laptop theft,  password theft, or sensitive emails being sent to the incorrect individuals.  Integrity In information security, data integrity means maintaining and assuring the accuracy and completeness of data over its entire lifecycle. This means that data cannot be modified in an unauthorized or undetected manner. This is not the same thing as referential integrity in databases, although it can be viewed as a special case of consistency as understood in the classic ACID model of transaction processing. Information security systems typically provide message integrity along side to confidentiality.  Availability For any information system to serve its purpose, the information must be available when it is needed. This means the computing systems used to store and process the information,  the security controls used to protect it, and the communication channels used to access it must be functioning correctly. High availability systems aim to remain available at all times, preventing service disruptions due to power outages, hardware failures,  and system upgrades. Ensuring availability also involves preventing denialofservice attacks,  such as a flood of incoming messages to the target system, essentially forcing it to shut down."
Source control systems in place,"We want to test our applications and infrastructure for out of date and insecure components and services that are running periodically.   We can configure our CI environment in such a way that we have jobs running that do automated continuous (hourly, daily, weekly, monthly) security scanning on our infrastructure and applications.","We want to test our applications and infrastructure for out of date and insecure components and services that are running periodically.   We can configure our CI environment in such a way that we have jobs running that do automated continuous (hourly, daily, weekly, monthly) security scanning on our infrastructure and applications."
Security test automation,"Security tools can be easiliy integrated into CI/CD pipelines. Generally the recommended way is to containerize your tooling to have a CI environment agnostic approach so you can build and configure them once and than run them everywhere you need. Especially with autonomous  self steering developer teams this is a really important development.  There are a lot of security tools on the market both free and premium. It is for you to decide which tools cover your technology stacks most optimal.  There are different category tooling such as but not limited to,   DAST tools   Web Application Vulnerability Scanners are automated tools that scan   web applications, normally from the outside, to look for security   vulnerabilities such as Crosssite scripting, SQL Injection,    Command Injection, Path Traversal and insecure server configuration.    This category of tools is frequently referred to as Dynamic Application    ecurity Testing (DAST) Tools.     SAST tools   Source code analysis tools, also referred to as Static    Application Security Testing (SAST) Tools, are designed to    analyze source code and/or compiled versions of code to help    find security flaws.     Dependency checker tools    up to 90 percent of an application typically consists of thirdparty components.    A depdendenct checker builds up the applications dependency tree and correlates    all the third party components to known vulnerabilities to see if    by using these libraries, you are introducing vulnerable components in your     application. Some Source code repositories provide dependency checking out    of the box these days.","Security tools can be easiliy integrated into CI/CD pipelines. Generally the recommended way is to containerize your tooling to have a CI environment agnostic approach so you can build and configure them once and than run them everywhere you need. Especially with autonomous  self steering developer teams this is a really important development.  There are a lot of security tools on the market both free and premium. It is for you to decide which tools cover your technology stacks most optimal.  There are different category tooling such as but not limited to,   DAST tools   Web Application Vulnerability Scanners are automated tools that scan   web applications, normally from the outside, to look for security   vulnerabilities such as Crosssite scripting, SQL Injection,    Command Injection, Path Traversal and insecure server configuration.    This category of tools is frequently referred to as Dynamic Application    ecurity Testing (DAST) Tools.     SAST tools   Source code analysis tools, also referred to as Static    Application Security Testing (SAST) Tools, are designed to    analyze source code and/or compiled versions of code to help    find security flaws.     Dependency checker tools    up to 90 percent of an application typically consists of thirdparty components.    A depdendenct checker builds up the applications dependency tree and correlates    all the third party components to known vulnerabilities to see if    by using these libraries, you are introducing vulnerable components in your     application. Some Source code repositories provide dependency checking out    of the box these days."
Referrer policy header,"Requests made from a document, and for navigations away from that document are associated with a Referer header. While the header can be suppressed for links with the noreferrer link type, authors might wish to control the Referer header more directly for a number of reasons,   Privacy A social networking site has a profile page for each of its users,  and users add hyperlinks from their profile page to their favorite bands.  The social networking site might not wish to leak the user’s profile URL  to the band web sites when other users follow those hyperlinks  (because the profile URLs might reveal the identity of the owner of the profile).  Some social networking sites, however, might wish to inform the band web sites that the links originated from the social networking site but not reveal which specific user’s profile contained the links.   Security A web application uses HTTPS and a URLbased session identifier. The web application might wish to link to HTTPS resources on other web sites without leaking the user’s session  identifier in the URL.  Alternatively, a web application may use URLs which themselves grant some capability.  Controlling the referrer can help prevent these capability URLs from leaking via  referrer headers.  Note that there are other ways for capability URLs to leak, and controlling  the referrer is not enough to control all those potential leaks.   Trackback A blog hosted over HTTPS might wish to link to a blog hosted over HTTP and  receive trackback links.","Requests made from a document, and for navigations away from that document are associated with a Referer header. While the header can be suppressed for links with the noreferrer link type, authors might wish to control the Referer header more directly for a number of reasons,   Privacy A social networking site has a profile page for each of its users,  and users add hyperlinks from their profile page to their favorite bands.  The social networking site might not wish to leak the user’s profile URL  to the band web sites when other users follow those hyperlinks  (because the profile URLs might reveal the identity of the owner of the profile).  Some social networking sites, however, might wish to inform the band web sites that the links originated from the social networking site but not reveal which specific user’s profile contained the links.   Security A web application uses HTTPS and a URLbased session identifier. The web application might wish to link to HTTPS resources on other web sites without leaking the user’s session  identifier in the URL.  Alternatively, a web application may use URLs which themselves grant some capability.  Controlling the referrer can help prevent these capability URLs from leaking via  referrer headers.  Note that there are other ways for capability URLs to leak, and controlling  the referrer is not enough to control all those potential leaks.   Trackback A blog hosted over HTTPS might wish to link to a blog hosted over HTTP and  receive trackback links."
Insecure application defaults,"When default sample applications, default users, etc are not removed from your production environment you are increasing an attackers potentiall attack surface significantly.","When default sample applications, default users, etc are not removed from your production environment you are increasing an attackers potentiall attack surface significantly."
Infrastructure as code,"Infrastructure as code (IaC) is the process of managing and provisioning  applications and infrastrucutre through machinereadable definition files,  rather than physical hardware configuration or interactive configuration tools","Infrastructure as code (IaC) is the process of managing and provisioning  applications and infrastrucutre through machinereadable definition files,  rather than physical hardware configuration or interactive configuration tools"
GraphQL security,"GraphQL is an opensource data query and manipulation language for APIs,  and a runtime for fulfilling queries with existing data. GraphQL was  developed internally by Facebook in 2012 before being publicly released i n 2015. On 7 November 2018, the GraphQL project was moved from Facebook  to the newlyestablished GraphQL foundation, hosted by the nonprofit Linux Foundation.","GraphQL is an opensource data query and manipulation language for APIs,  and a runtime for fulfilling queries with existing data. GraphQL was  developed internally by Facebook in 2012 before being publicly released i n 2015. On 7 November 2018, the GraphQL project was moved from Facebook  to the newlyestablished GraphQL foundation, hosted by the nonprofit Linux Foundation."
JSON validation schema,"JSON Schema is a vocabulary that allows you to annotate and validate JSON documents.  When adding schema''s to your or JSON files you have better control over what type of userinput can be supplied in your application.  This dramatically decreases an attacker’s vector when implemented the right way.  Nonetheless, you should always apply your own input validation and rejection as an extra layer of defense. This approach is also desirable since you also  want to do countering and logging on the user’s requests and input.","JSON Schema is a vocabulary that allows you to annotate and validate JSON documents.  When adding schema''s to your or JSON files you have better control over what type of userinput can be supplied in your application.  This dramatically decreases an attacker’s vector when implemented the right way.  Nonetheless, you should always apply your own input validation and rejection as an extra layer of defense. This approach is also desirable since you also  want to do countering and logging on the user’s requests and input."
Serve files whitelist.,Configiring the web server to only serve files with an expected file extension helps prevent information leakage whenever developers forget to remove backup files or zipped versions of the web application from the webserver.,Configiring the web server to only serve files with an expected file extension helps prevent information leakage whenever developers forget to remove backup files or zipped versions of the web application from the webserver.
User supplied scriptable or expression template language content,"usersupplied scriptable or expression template language content, such as Markdown,  CSS or XSL stylesheets, BBCode, or similar are designed to give users the option to add a lot of rich styling to the application. However whenever these templates  do not filter for harmfull attacks, these templates can be used to leverage XSS attacks.","usersupplied scriptable or expression template language content, such as Markdown,  CSS or XSL stylesheets, BBCode, or similar are designed to give users the option to add a lot of rich styling to the application. However whenever these templates  do not filter for harmfull attacks, these templates can be used to leverage XSS attacks."
Replay attacks,"A replay attack (also known as playback attack) is a form of attack in which a valid data transmission is maliciously or fraudulently repeated or delayed.  This is carried out either by the originator or by an adversary who intercepts the data and retransmits it. This is one of the lower tier versions of a ""Maninthemiddle attack"".","A replay attack (also known as playback attack) is a form of attack in which a valid data transmission is maliciously or fraudulently repeated or delayed.  This is carried out either by the originator or by an adversary who intercepts the data and retransmits it. This is one of the lower tier versions of a ""Maninthemiddle attack""."
Same site attribute,SameSite prevents the browser from sending this cookie along with crosssite requests.  The main goal is mitigate the risk of crossorigin information leakage. It also provides some  protection against crosssite request forgery attacks.,SameSite prevents the browser from sending this cookie along with crosssite requests.  The main goal is mitigate the risk of crossorigin information leakage. It also provides some  protection against crosssite request forgery attacks.
Host prefix,"the ''__Host"" prefix signals to the browser that both the Path=/ and Secure attributes are required,  and at the same time, that the Domain attribute may not be present.","the ''__Host"" prefix signals to the browser that both the Path=/ and Secure attributes are required,  and at the same time, that the Domain attribute may not be present."
Race conditions,"A race condition is a flaw that produces an unexpected result when the timing of actions impact other actions.  An example may be seen on a multithreaded application where actions are being performed on the same data.  Race conditions, by their very nature, are difficult to test for.  Race conditions may occur when a process is critically or unexpectedly dependent on the sequence or timings of  other events. In a web application environment, where multiple requests can be processed at a given time,  developers may leave concurrency to be handled by the framework, server, or programming language.","A race condition is a flaw that produces an unexpected result when the timing of actions impact other actions.  An example may be seen on a multithreaded application where actions are being performed on the same data.  Race conditions, by their very nature, are difficult to test for.  Race conditions may occur when a process is critically or unexpectedly dependent on the sequence or timings of  other events. In a web application environment, where multiple requests can be processed at a given time,  developers may leave concurrency to be handled by the framework, server, or programming language."
Sub domain take over,"Subdomain takeover is a process of registering a nonexisting domain name to gain control over another domain.  The most common scenario of this process follows:  Domain name (e.g., sub.example.com) uses a CNAME record to another domain (e.g., sub.example.com CNAME anotherdomain.com). At some point in time, anotherdomain.com expires and is available for registration by anyone. Since the CNAME record is not deleted from example.com DNS zone, anyone who registers anotherdomain.com has full control over sub.example.com until the DNS record is present.  The implications of the subdomain takeover can be pretty significant. Using a subdomain takeover, attackers can send phishing emails from the legitimate domain, perform crosssite scripting (XSS), or damage the  reputation of the brand which is associated with the domain.   Source: https://0xpatrik.com/subdomaintakeoverbasics/","Subdomain takeover is a process of registering a nonexisting domain name to gain control over another domain.  The most common scenario of this process follows:  Domain name (e.g., sub.example.com) uses a CNAME record to another domain (e.g., sub.example.com CNAME anotherdomain.com). At some point in time, anotherdomain.com expires and is available for registration by anyone. Since the CNAME record is not deleted from example.com DNS zone, anyone who registers anotherdomain.com has full control over sub.example.com until the DNS record is present.  The implications of the subdomain takeover can be pretty significant. Using a subdomain takeover, attackers can send phishing emails from the legitimate domain, perform crosssite scripting (XSS), or damage the  reputation of the brand which is associated with the domain.   Source: https://0xpatrik.com/subdomaintakeoverbasics/"
No password rotation policy,"Some policies require users to change passwords periodically, often every 90 or 180 days.  The benefit of password expiration, however, is debatable. Systems that implement such  policies sometimes prevent users from picking a password too close to a previous selection.  This policy can often backfire. Some users find it hard to devise ""good"" passwords that are  also easy to remember, so if people are required to choose many passwords because they have  to change them often, they end up using much weaker passwords; the policy also encourages  users to write passwords down. Also, if the policy prevents a user from repeating a recent password,  this requires that there is a database in existence of everyone''s recent passwords (or their hashes)  instead of having the old ones erased from memory. Finally, users may change their password repeatedly within a few minutes, and then change back to the one they really want to use, circumventing the  password change policy altogether.","Some policies require users to change passwords periodically, often every 90 or 180 days.  The benefit of password expiration, however, is debatable. Systems that implement such  policies sometimes prevent users from picking a password too close to a previous selection.  This policy can often backfire. Some users find it hard to devise ""good"" passwords that are  also easy to remember, so if people are required to choose many passwords because they have  to change them often, they end up using much weaker passwords; the policy also encourages  users to write passwords down. Also, if the policy prevents a user from repeating a recent password,  this requires that there is a database in existence of everyone''s recent passwords (or their hashes)  instead of having the old ones erased from memory. Finally, users may change their password repeatedly within a few minutes, and then change back to the one they really want to use, circumventing the  password change policy altogether."
User notification on critical state changing operations,"When a user is informed of critical operations than the user can determine if the notification is send by his own actions, or that the notifucation indicates  potential compromitation of his user account.","When a user is informed of critical operations than the user can determine if the notification is send by his own actions, or that the notifucation indicates  potential compromitation of his user account."
Stateless session tokens,"Exception handling is the process of responding to the occurrence, during computation,  of exceptions – anomalous or exceptional conditions requiring special processing  often disrupting the normal flow of program execution. It is provided by specialized  programming language constructs, computer hardware mechanisms like interrupts or operating  system IPC facilities like signals.  In general, an exception breaks the normal flow of execution and executes a preregistered  exception handler. The details of how this is done depends on whether it is a hardware or  software exception and how the software exception is implemented. Some exceptions,  especially hardware ones, may be handled so gracefully that execution can resume where it was interrupted.  Alternative approaches to exception handling in software are error checking,  which maintains normal program flow with later explicit checks for contingencies  reported using special return values or some auxiliary global variable  such as C''s errno or floating point status flags; or input validation to preemptively  filter exceptional cases.","Exception handling is the process of responding to the occurrence, during computation,  of exceptions – anomalous or exceptional conditions requiring special processing  often disrupting the normal flow of program execution. It is provided by specialized  programming language constructs, computer hardware mechanisms like interrupts or operating  system IPC facilities like signals.  In general, an exception breaks the normal flow of execution and executes a preregistered  exception handler. The details of how this is done depends on whether it is a hardware or  software exception and how the software exception is implemented. Some exceptions,  especially hardware ones, may be handled so gracefully that execution can resume where it was interrupted.  Alternative approaches to exception handling in software are error checking,  which maintains normal program flow with later explicit checks for contingencies  reported using special return values or some auxiliary global variable  such as C''s errno or floating point status flags; or input validation to preemptively  filter exceptional cases."
Back up data,"Static program analysis is the analysis of computer software that is performed without actually  executing programs, in contrast with dynamic analysis, which is analysis performed on programs  while they are executing.[1] In most cases the analysis is performed on some version of the source code,  and in the other cases, some form of the object code.  The term is usually applied to the analysis performed by an automated tool, with human analysis being  called program understanding, program comprehension, or code review. Software inspections and software  walkthroughs are also used in the latter case.","Static program analysis is the analysis of computer software that is performed without actually  executing programs, in contrast with dynamic analysis, which is analysis performed on programs  while they are executing.[1] In most cases the analysis is performed on some version of the source code,  and in the other cases, some form of the object code.  The term is usually applied to the analysis performed by an automated tool, with human analysis being  called program understanding, program comprehension, or code review. Software inspections and software  walkthroughs are also used in the latter case."
TLS,"Transport Layer Security (TLS), and its nowdeprecated predecessor, Secure Sockets Layer (SSL), are cryptographic protocols designed to provide communications security over a computer network. Several versions of the protocols find widespread use in applications such as web browsing, email, instant messaging, and voice over IP (VoIP). Websites can use TLS to secure all communications between their servers and web browsers.  The TLS protocol aims primarily to provide privacy and data integrity between two or more communicating computer applications.[2]:3 When secured by TLS, connections between a client  (e.g., a web browser) and a server (e.g., wikipedia.org) should have one or more of the following properties:  The connection is private (or secure) because symmetric cryptography is used to encrypt the data transmitted.  The keys for this symmetric encryption are generated uniquely for each connection and are based on a shared  secret that was negotiated at the start of the session. The server and client negotiate  the details of which encryption algorithm and cryptographic keys to use before the first byte of data is transmitted.  The negotiation of a shared secret is both secure (the negotiated secret is unavailable to eavesdroppers and cannot be  obtained, even by an attacker who places themselves in the middle of the connection) and reliable  (no attacker can modify the communications during the negotiation without being detected).  The identity of the communicating parties can be authenticated using publickey cryptography.  This authentication can be made optional, but is generally required for at least one of the parties (typically the server).  The connection is reliable because each message transmitted includes a message integrity check using  a message authentication code to prevent undetected loss or alteration of the data during transmission.  In addition to the properties above, careful configuration of TLS can provide additional privacyrelated properties  such as forward secrecy, ensuring that any future disclosure of encryption keys cannot be used to decrypt any  TLS communications recorded in the past","Transport Layer Security (TLS), and its nowdeprecated predecessor, Secure Sockets Layer (SSL), are cryptographic protocols designed to provide communications security over a computer network. Several versions of the protocols find widespread use in applications such as web browsing, email, instant messaging, and voice over IP (VoIP). Websites can use TLS to secure all communications between their servers and web browsers.  The TLS protocol aims primarily to provide privacy and data integrity between two or more communicating computer applications.[2]:3 When secured by TLS, connections between a client  (e.g., a web browser) and a server (e.g., wikipedia.org) should have one or more of the following properties:  The connection is private (or secure) because symmetric cryptography is used to encrypt the data transmitted.  The keys for this symmetric encryption are generated uniquely for each connection and are based on a shared  secret that was negotiated at the start of the session. The server and client negotiate  the details of which encryption algorithm and cryptographic keys to use before the first byte of data is transmitted.  The negotiation of a shared secret is both secure (the negotiated secret is unavailable to eavesdroppers and cannot be  obtained, even by an attacker who places themselves in the middle of the connection) and reliable  (no attacker can modify the communications during the negotiation without being detected).  The identity of the communicating parties can be authenticated using publickey cryptography.  This authentication can be made optional, but is generally required for at least one of the parties (typically the server).  The connection is reliable because each message transmitted includes a message integrity check using  a message authentication code to prevent undetected loss or alteration of the data during transmission.  In addition to the properties above, careful configuration of TLS can provide additional privacyrelated properties  such as forward secrecy, ensuring that any future disclosure of encryption keys cannot be used to decrypt any  TLS communications recorded in the past"
Code signing,"Code signing is the process of digitally signing executables and scripts to confirm the software  author and guarantee that the code has not been altered or corrupted since it was signed.  The process employs the use of a cryptographic hash to validate authenticity and integrity.  Code signing can provide several valuable features. The most common use of code signing is to  provide security when deploying; in some programming languages, it can also be used to help prevent  namespace conflicts. Almost every code signing implementation will provide some sort of digital  signature mechanism to verify the identity of the author or build system, and a checksum to verify  that the object has not been modified. It can also be used to provide versioning information about an  object or to store other meta data about an objec","Code signing is the process of digitally signing executables and scripts to confirm the software  author and guarantee that the code has not been altered or corrupted since it was signed.  The process employs the use of a cryptographic hash to validate authenticity and integrity.  Code signing can provide several valuable features. The most common use of code signing is to  provide security when deploying; in some programming languages, it can also be used to help prevent  namespace conflicts. Almost every code signing implementation will provide some sort of digital  signature mechanism to verify the identity of the author or build system, and a checksum to verify  that the object has not been modified. It can also be used to provide versioning information about an  object or to store other meta data about an objec"
Secure random generators,This item is currently not available.,This item is currently not available.
Sensitive Information Exposure in URL,"If the application logic transmits session IDs in the URL, their values could be leaked through the Referer header to thirdparty websites, logged by proxy servers, bookmarked in the browser, accidentally sent via emails or chats.  Whenever the session ID is disclosed in the URL there might be also the possibility to perform other attacks (like session fixation) that lead to session hijacking.","If the application logic transmits session IDs in the URL, their values could be leaked through the Referer header to thirdparty websites, logged by proxy servers, bookmarked in the browser, accidentally sent via emails or chats.  Whenever the session ID is disclosed in the URL there might be also the possibility to perform other attacks (like session fixation) that lead to session hijacking."
Sensitive Information Exposure in client Side Storage,The application should always generate a new session ID only after the user submits a set of valid credentials upon authentication. This is meant to prevent an attacker from performing Session Fixation attacks against other users.,The application should always generate a new session ID only after the user submits a set of valid credentials upon authentication. This is meant to prevent an attacker from performing Session Fixation attacks against other users.
Secure Generation of Session Tokens,"The application should always generate session IDs with a sufficient level of entropy. The goal to use randomly generated values for tokens is that of preventing session collision or session hijacking. If an attacker can guess an authenticated user''s session identifier, he can take over the user''s session. Moreover, an attacker that breaks the algorithm logic behind the session IDs generation might be able to arbitrary craft valid session tokens for any user.","The application should always generate session IDs with a sufficient level of entropy. The goal to use randomly generated values for tokens is that of preventing session collision or session hijacking. If an attacker can guess an authenticated user''s session identifier, he can take over the user''s session. Moreover, an attacker that breaks the algorithm logic behind the session IDs generation might be able to arbitrary craft valid session tokens for any user."
Ensure Session Validation in Credential Service Provider and Relying Parties.md,A Credential Service Provider (or Identity Provider) is an Identity Access Management entity that releases security tokens to users of specific services (called Relying Parties or Service Providers). An Identity Provider makes possible to authenticate the user to registered services without actually requiring them to login again for every application.  When deploying a Credential Service Provider it is necessary to verify that the Credential Service Provider and Relying Parties handle the session management mechanisms in a secure way.,A Credential Service Provider (or Identity Provider) is an Identity Access Management entity that releases security tokens to users of specific services (called Relying Parties or Service Providers). An Identity Provider makes possible to authenticate the user to registered services without actually requiring them to login again for every application.  When deploying a Credential Service Provider it is necessary to verify that the Credential Service Provider and Relying Parties handle the session management mechanisms in a secure way.
Permit Password Change,"Users should be able to update their password whenever it is necessary. For example, take in consideration the scenario in which they tend to use the same password for multiple purposes. If this password is leaked, the users have to immediately update their credentials in every application they are registered. Therefore, if the application does not provide an accessible password update functionality to a user, there is the risk that his account may be taken over.","Users should be able to update their password whenever it is necessary. For example, take in consideration the scenario in which they tend to use the same password for multiple purposes. If this password is leaked, the users have to immediately update their credentials in every application they are registered. Therefore, if the application does not provide an accessible password update functionality to a user, there is the risk that his account may be taken over."
Provide Password Strength Checker,"Users may tend to choose easy guessable passwords. Therefore, it is suggested to implement a functionality that encourage them to set password of higher complexity.","Users may tend to choose easy guessable passwords. Therefore, it is suggested to implement a functionality that encourage them to set password of higher complexity."
Verify Breached Passwords,"Multiple database of leaked credentials have been released during breaches over the years. If users choose passwords already leaked, they are vulnerable to dictionary attacks.","Multiple database of leaked credentials have been released during breaches over the years. If users choose passwords already leaked, they are vulnerable to dictionary attacks."
Offline Attacks on Passwords,"Passwords stored locally are often vulnerable to offline attacks like dictionary attacks(list of commonly known passwords), bruteforce(permutation of all possible combinations) and rainbow tables(generate hashes upfront and do a look up for each hash). Since we belong to a generation of high speed computers performing these attacks is quite a trivial task for the attackers.","Passwords stored locally are often vulnerable to offline attacks like dictionary attacks(list of commonly known passwords), bruteforce(permutation of all possible combinations) and rainbow tables(generate hashes upfront and do a look up for each hash). Since we belong to a generation of high speed computers performing these attacks is quite a trivial task for the attackers."
Password Hash Salt Length,"For secure storage of passwords, it is recommended to hash the passwords with a unique salt. A salt is a nonsecret, unique value in the database which is appended (depending on the used algorithm) to the password before it gets hashed. A salt is used to prevent Rainbow Table lookups (an attack where you compute a table of hashes for passwords). The length of a salt is critical to ensure true randomness and entropy amongst the hashed password and prevent collusion.","For secure storage of passwords, it is recommended to hash the passwords with a unique salt. A salt is a nonsecret, unique value in the database which is appended (depending on the used algorithm) to the password before it gets hashed. A salt is used to prevent Rainbow Table lookups (an attack where you compute a table of hashes for passwords). The length of a salt is critical to ensure true randomness and entropy amongst the hashed password and prevent collusion."
PBKDF2 Iteration Count,"PBKDF2, is a function for creating a cryptographic key from a password. The aim of the function is to create a key in such a way that dictionary attacks (where the attacker just tries a range of possible passwords) are unfeasible. To do this, PBKDF2 applies a pseudorandom function (PRF) to the password many times. Additionally, the function can be given a “salt” parameter to make each key derivation operation unique. A developer using PBKDF2 must carefully choose parameter values for the salt, the PRF, and the number of iterations, i.e. the number of times the PRF will be applied to the password when deriving the key.","PBKDF2, is a function for creating a cryptographic key from a password. The aim of the function is to create a key in such a way that dictionary attacks (where the attacker just tries a range of possible passwords) are unfeasible. To do this, PBKDF2 applies a pseudorandom function (PRF) to the password many times. Additionally, the function can be given a “salt” parameter to make each key derivation operation unique. A developer using PBKDF2 must carefully choose parameter values for the salt, the PRF, and the number of iterations, i.e. the number of times the PRF will be applied to the password when deriving the key."
Bcrypt Work Factor,"The attraction of bcrypt is that you can tune its work factor to counter increases in computing technology, so that it''s very slow to bruteforce compared to an MD5/SHA/CRC, all of which are extremely fast to compute. When bcrypt was introduced, the cost factor was 6 for normal users and 8 for super users. Chances are you’re just using the default bcrypt cost factor. Bcryptruby and most other implementations set this to 10, meaning 2^10 key expansion rounds. With advances in computing technology, it is highly recommended to tune the work factor cost periodically to combat brute force attacks.","The attraction of bcrypt is that you can tune its work factor to counter increases in computing technology, so that it''s very slow to bruteforce compared to an MD5/SHA/CRC, all of which are extremely fast to compute. When bcrypt was introduced, the cost factor was 6 for normal users and 8 for super users. Chances are you’re just using the default bcrypt cost factor. Bcryptruby and most other implementations set this to 10, meaning 2^10 key expansion rounds. With advances in computing technology, it is highly recommended to tune the work factor cost periodically to combat brute force attacks."
OOB Unencrypted,"In authentication, outofband refers to utilizing two separate networks or channels, one of which being different from the primary network or channel, simultaneously used to communicate between two parties or devices for identifying a user. A cellular network is commonly used for outofband authentication. An example of outofband authentication is when an online banking user is accessing their online bank account with a login and a one time password is sent to their mobile phone via SMS to identify them. The primary channel would be the online login screen where the user enters their login information and the second separate channel would be the cellular network. This added layer of security prevents the likelihood of hackers and malware from compromising access to the complete authentication process.","In authentication, outofband refers to utilizing two separate networks or channels, one of which being different from the primary network or channel, simultaneously used to communicate between two parties or devices for identifying a user. A cellular network is commonly used for outofband authentication. An example of outofband authentication is when an online banking user is accessing their online bank account with a login and a one time password is sent to their mobile phone via SMS to identify them. The primary channel would be the online login screen where the user enters their login information and the second separate channel would be the cellular network. This added layer of security prevents the likelihood of hackers and malware from compromising access to the complete authentication process."
Secure OOB Channel,"The essential idea behind outofband authentication is that by using two different channels, authentication systems can guard against fraudulent users that may only have access to one of these channels. One of the most common examples of outofband authentication is in banking transactions. Typically, a customer wishing to do an online bank transaction will be sent an SMS message by cell phone with a password. This way, any hackers or identity thieves that have access through key loggers or other equipment will not be able to access that particular password, because it is sent over a 3G or 4G wireless network instead of being sent over the Internet.It is worthy to ensure the channel between the communicating parties is through a trusted and secure channel.","The essential idea behind outofband authentication is that by using two different channels, authentication systems can guard against fraudulent users that may only have access to one of these channels. One of the most common examples of outofband authentication is in banking transactions. Typically, a customer wishing to do an online bank transaction will be sent an SMS message by cell phone with a password. This way, any hackers or identity thieves that have access through key loggers or other equipment will not be able to access that particular password, because it is sent over a 3G or 4G wireless network instead of being sent over the Internet.It is worthy to ensure the channel between the communicating parties is through a trusted and secure channel."
OOB PIN Expiry,"If an application allows the user to attempt for outofband authentication after a set time interval, it increases the chance of an attacker to replay a valid outofband authentication key after successfully compromising the session.","If an application allows the user to attempt for outofband authentication after a set time interval, it increases the chance of an attacker to replay a valid outofband authentication key after successfully compromising the session."
OOB Key Used Once,"If an application allows the user to attempt for outofband authentication using an old outofband authentication key, it increases the likelihood of replay attacks and can assist in comprising a user session.","If an application allows the user to attempt for outofband authentication using an old outofband authentication key, it increases the likelihood of replay attacks and can assist in comprising a user session."
Unsafe password reset,Sending passwords or activation key''s in clear text exposes sensitive information.,Sending passwords or activation key''s in clear text exposes sensitive information.
Presence of Knowledge,"Avoid the use of knowledgebasedanswers(socalled ""secret questions""). Due to the predominant use of social media, the power of Internet search engines, and access to public records via the Internet, your personal information is only be a few keystrokes away,  allowing an attacker to reset your password or recover sensitive information.","Avoid the use of knowledgebasedanswers(socalled ""secret questions""). Due to the predominant use of social media, the power of Internet search engines, and access to public records via the Internet, your personal information is only be a few keystrokes away,  allowing an attacker to reset your password or recover sensitive information."
Current Password Exposure,The recovery of cedentials should never reveal or send the current password to the user.,The recovery of cedentials should never reveal or send the current password to the user.
Implement Two Factor Authentication for Password Recovery,To verify the user is who he claims to be in order to recover a forgotten password a two factor authentication mechanism should be implemented.,To verify the user is who he claims to be in order to recover a forgotten password a two factor authentication mechanism should be implemented.
Identity Spoofing,"It is important to uniquely identify the users of an application for traceability. Therefore it should not be possible to use shared accounts, nor should it be possible to rebind identities to a different identity (spoofing)","It is important to uniquely identify the users of an application for traceability. Therefore it should not be possible to use shared accounts, nor should it be possible to rebind identities to a different identity (spoofing)"
Multifcator Authentication Exposure,"Once a multifactore authentication factor is lost, damaged, or not working, it is important that identity proofing and binding is performed at the same level as during enrollment.","Once a multifactore authentication factor is lost, damaged, or not working, it is important that identity proofing and binding is performed at the same level as during enrollment."
Authentication Factor Notification,The user should be aware of any changes to his multiplefactor authentication.,The user should be aware of any changes to his multiplefactor authentication.
MinimumPasswordLength,Minimum password length,Minimum password length
PermitLongPasswords,"Passwords of at least 64 characters should be allowed.  The use of password managers should be encouraged and supported by ensuring users can paste into password data entry fields,  thereby enabling the automated use of password managers.","Passwords of at least 64 characters should be allowed.  The use of password managers should be encouraged and supported by ensuring users can paste into password data entry fields,  thereby enabling the automated use of password managers."
Permit Spaces In Passwords,"By allowing spaces in passwords, a password can become a passphrase which is almost impossible to crack as long as it is not a common or popular quote.  Also adding spaces in a password increases the entropy of your password.","By allowing spaces in passwords, a password can become a passphrase which is almost impossible to crack as long as it is not a common or popular quote.  Also adding spaces in a password increases the entropy of your password."
Permit Unicode Characters In Passwords,"We remember visual information quicker and better comparing to text so a more complex password can be easely remembered.  For the moment password crackers don''t consider Emoji''s and kanji characters in their tools, but even if they would (and will in the near future),         using even a single Emoji in addition to a characters or/and numbers makes the range of possible passwords wider, which means it becomes harder to hack.","We remember visual information quicker and better comparing to text so a more complex password can be easely remembered.  For the moment password crackers don''t consider Emoji''s and kanji characters in their tools, but even if they would (and will in the near future),         using even a single Emoji in addition to a characters or/and numbers makes the range of possible passwords wider, which means it becomes harder to hack."
Change And Validate Current Password,"The user should be the only one who knows his password, so if an administrator provides the initial password,   the user should be able to change his password. Also when a user believes the current password has   been (or might have been) compromised, or as a precautionary measure the user must be able to change his password.    When a user changes his password, his current password should be validated.   This prevents an attacker that is able to take control of a valid session, to easily change the victim''s password.","The user should be the only one who knows his password, so if an administrator provides the initial password,   the user should be able to change his password. Also when a user believes the current password has   been (or might have been) compromised, or as a precautionary measure the user must be able to change his password.    When a user changes his password, his current password should be validated.   This prevents an attacker that is able to take control of a valid session, to easily change the victim''s password."
List of compromised passwords,"The application should compare the new prospective password against a list that contains values known to be commonlyused, expected, or compromised.","The application should compare the new prospective password against a list that contains values known to be commonlyused, expected, or compromised."
Password Strength Indicator,Password strength meters are intended to motivate users to create stronger passwords in the interest of   tightening security. The motivating effect is especially high when showing a score numerically and relative   to other users.,Password strength meters are intended to motivate users to create stronger passwords in the interest of   tightening security. The motivating effect is especially high when showing a score numerically and relative   to other users.
No Character type limitation,"The application should allow and not limit or enforce the type of characters that are permitted.   Moreover, the application should enable the user to make pass phrases containng any usable character and   therefore strengthen security.","The application should allow and not limit or enforce the type of characters that are permitted.   Moreover, the application should enable the user to make pass phrases containng any usable character and   therefore strengthen security."
No Credential Rotation Requirements,"Do not require that memorized secrets be changed arbitrarily (e.g., periodically)  unless there is a user request or evidence of authenticator compromise.   Password expiration policies do more harm than good, because these policies drive users to very  predictable passwords composed of sequential words and numbers which are closely related to each  other (that is, the next password can be predicted based on the previous password). Password change  offers no containment benefits cyber criminals almost always use credentials as soon as they  compromise them.  Mandated password changes are a longstanding security practice, but current research strongly  indicates that password expiration has a negative effect.","Do not require that memorized secrets be changed arbitrarily (e.g., periodically)  unless there is a user request or evidence of authenticator compromise.   Password expiration policies do more harm than good, because these policies drive users to very  predictable passwords composed of sequential words and numbers which are closely related to each  other (that is, the next password can be predicted based on the previous password). Password change  offers no containment benefits cyber criminals almost always use credentials as soon as they  compromise them.  Mandated password changes are a longstanding security practice, but current research strongly  indicates that password expiration has a negative effect."
Logout session expiration,"Once the user hits the logout button or is logged out by inacitivity, it''s expected the application terminates user''s session and expires session identifiers properly. However, there are situations in which the application simply redirects the user to the logon page. Also, the modern applications relies on client side storage, as cache files, browser session storage, cookies as IndexedDB which may contain session related and sensitive information. Yet, complex applications relying on singlesignon(SSO) mechanisms may leave the source application sesssion as open. In the described scenarios, one attacker accessing a shared computer or using an unattended computer can resume the session and operate the application on the user''s behalf.","Once the user hits the logout button or is logged out by inacitivity, it''s expected the application terminates user''s session and expires session identifiers properly. However, there are situations in which the application simply redirects the user to the logon page. Also, the modern applications relies on client side storage, as cache files, browser session storage, cookies as IndexedDB which may contain session related and sensitive information. Yet, complex applications relying on singlesignon(SSO) mechanisms may leave the source application sesssion as open. In the described scenarios, one attacker accessing a shared computer or using an unattended computer can resume the session and operate the application on the user''s behalf."
Reauthentication valid sessions,"If the application allows the user to remain authenticated for a long period of time, for example ""Stay logged in"" functionality, which prolongs user session longer than the regular serverside timeouts, it increases the chance of an attacker to replay a valid session after successfully compromising the session.","If the application allows the user to remain authenticated for a long period of time, for example ""Stay logged in"" functionality, which prolongs user session longer than the regular serverside timeouts, it increases the chance of an attacker to replay a valid session after successfully compromising the session."
Change password session expiration,"In case the user session is not terminated after a major user profile modification such as a role modification or password change, the user session and profile won''t be in the most updated state. If the user password is compromised, an attacker will be able to operate the application on behalf of the user while the session remains valid, even after the password is changed.","In case the user session is not terminated after a major user profile modification such as a role modification or password change, the user session and profile won''t be in the most updated state. If the user password is compromised, an attacker will be able to operate the application on behalf of the user while the session remains valid, even after the password is changed."
Samesite cookie attribute,"The ''SameSite'' cookie attribute helps developers to control if a cookie can be sent along in requests initiated by thirdparty sites or crosssite requests, helping to prevent CrossSiteRequestForgery(CSRF) type of attacks. The attribute accepts 2 values: strict and lax.  strict: The cookie will NOT be transmitted within requests initiated by thirdparty sites, even if initiated by a GET request.  lax: The cookie will be sent along with GET request only if a Top Level Navigation occurs.","The ''SameSite'' cookie attribute helps developers to control if a cookie can be sent along in requests initiated by thirdparty sites or crosssite requests, helping to prevent CrossSiteRequestForgery(CSRF) type of attacks. The attribute accepts 2 values: strict and lax.  strict: The cookie will NOT be transmitted within requests initiated by thirdparty sites, even if initiated by a GET request.  lax: The cookie will be sent along with GET request only if a Top Level Navigation occurs."
Weak revocability of physical authenticators,"The physical authenticators are very powerful and have some advantages, still they must be considered as compromised, if they were stolen or disappeared. In this case the user (owner of the physical token) needs to get these tokens revoked.  If the revocation process it not effective, then the attacker could use it on behalf of the owner and could get access to their resources.","The physical authenticators are very powerful and have some advantages, still they must be considered as compromised, if they were stolen or disappeared. In this case the user (owner of the physical token) needs to get these tokens revoked.  If the revocation process it not effective, then the attacker could use it on behalf of the owner and could get access to their resources."
Lack of Bruteforce Protection,"Every password is hackable. Even the stronger ones, as well. The technique name is bruteforce. In case the attacker can do several of thousand login attempts to find out the proper password, then just matter of time and he/she will be successful.","Every password is hackable. Even the stronger ones, as well. The technique name is bruteforce. In case the attacker can do several of thousand login attempts to find out the proper password, then just matter of time and he/she will be successful."
Improper Two Factor Authenticators design,"In case of web applications using only biometric authenticators, or using them at first place is not a security best practice. Asking and validating a data (like passwords) needs to be the first layer of the authentication part, and then the second place the biometric authenticators can be employed.","In case of web applications using only biometric authenticators, or using them at first place is not a security best practice. Asking and validating a data (like passwords) needs to be the first layer of the authentication part, and then the second place the biometric authenticators can be employed."
